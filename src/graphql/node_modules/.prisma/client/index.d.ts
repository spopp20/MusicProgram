
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 */

export type User = {
  id: number
  createdAt: Date
  updatedAt: Date
  email: string
  name: string | null
  password: string
  active: number
  role: Role
}

/**
 * Model Event
 */

export type Event = {
  id: number
  name: string
  active: number
  description: string | null
  venue: string | null
  location: string | null
  notes: string | null
  telephone: string | null
  startDateTime: Date
  endDateTime: Date | null
  createAt: Date
  updatedAt: Date
}

/**
 * Model EventSong
 */

export type EventSong = {
  id: number
  eventId: number | null
  songId: number | null
  published: number
  description: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Song
 */

export type Song = {
  id: number
  title: string
  active: number
  alias: string | null
  startKey: string | null
  tempoCd: number | null
  startWords: string | null
  arrangement: string | null
  tags: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Instrument
 */

export type Instrument = {
  id: number
  name: string
  active: number
  description: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model InstrumentSong
 */

export type InstrumentSong = {
  id: number
  notes: string | null
  words: string | null
  mimeType: string | null
  file: string | null
  songId: number | null
  instrumentId: number | null
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: 'USER',
  EDITOR: 'EDITOR',
  LEADER: 'LEADER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<GlobalReject>;

  /**
   * `prisma.eventSong`: Exposes CRUD operations for the **EventSong** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventSongs
    * const eventSongs = await prisma.eventSong.findMany()
    * ```
    */
  get eventSong(): Prisma.EventSongDelegate<GlobalReject>;

  /**
   * `prisma.song`: Exposes CRUD operations for the **Song** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Songs
    * const songs = await prisma.song.findMany()
    * ```
    */
  get song(): Prisma.SongDelegate<GlobalReject>;

  /**
   * `prisma.instrument`: Exposes CRUD operations for the **Instrument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instruments
    * const instruments = await prisma.instrument.findMany()
    * ```
    */
  get instrument(): Prisma.InstrumentDelegate<GlobalReject>;

  /**
   * `prisma.instrumentSong`: Exposes CRUD operations for the **InstrumentSong** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InstrumentSongs
    * const instrumentSongs = await prisma.instrumentSong.findMany()
    * ```
    */
  get instrumentSong(): Prisma.InstrumentSongDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.27.0
   * Query Engine version: cdba6ec525e0213cce26f8e4bb23cf556d1479bb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Event: 'Event',
    EventSong: 'EventSong',
    Song: 'Song',
    Instrument: 'Instrument',
    InstrumentSong: 'InstrumentSong'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EventCountOutputType
   */


  export type EventCountOutputType = {
    songs: number
  }

  export type EventCountOutputTypeSelect = {
    songs?: boolean
  }

  export type EventCountOutputTypeGetPayload<
    S extends boolean | null | undefined | EventCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? EventCountOutputType
    : S extends undefined
    ? never
    : S extends EventCountOutputTypeArgs
    ?'include' extends U
    ? EventCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof EventCountOutputType ?EventCountOutputType [P]
  : 
     never
  } 
    : EventCountOutputType
  : EventCountOutputType




  // Custom InputTypes

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     * 
    **/
    select?: EventCountOutputTypeSelect | null
  }



  /**
   * Count Type SongCountOutputType
   */


  export type SongCountOutputType = {
    events: number
    instruments: number
  }

  export type SongCountOutputTypeSelect = {
    events?: boolean
    instruments?: boolean
  }

  export type SongCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SongCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SongCountOutputType
    : S extends undefined
    ? never
    : S extends SongCountOutputTypeArgs
    ?'include' extends U
    ? SongCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SongCountOutputType ?SongCountOutputType [P]
  : 
     never
  } 
    : SongCountOutputType
  : SongCountOutputType




  // Custom InputTypes

  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SongCountOutputType
     * 
    **/
    select?: SongCountOutputTypeSelect | null
  }



  /**
   * Count Type InstrumentCountOutputType
   */


  export type InstrumentCountOutputType = {
    songs: number
  }

  export type InstrumentCountOutputTypeSelect = {
    songs?: boolean
  }

  export type InstrumentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | InstrumentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? InstrumentCountOutputType
    : S extends undefined
    ? never
    : S extends InstrumentCountOutputTypeArgs
    ?'include' extends U
    ? InstrumentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof InstrumentCountOutputType ?InstrumentCountOutputType [P]
  : 
     never
  } 
    : InstrumentCountOutputType
  : InstrumentCountOutputType




  // Custom InputTypes

  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the InstrumentCountOutputType
     * 
    **/
    select?: InstrumentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    active: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    active: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    name: string | null
    password: string | null
    active: number | null
    role: Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    name: string | null
    password: string | null
    active: number | null
    role: Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    name: number
    password: number
    active: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    active?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    active?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    name?: true
    password?: true
    active?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    name?: true
    password?: true
    active?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    name?: true
    password?: true
    active?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    email: string
    name: string | null
    password: string
    active: number
    role: Role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    active?: boolean
    role?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
     never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model Event
   */


  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
    max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    active: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    active: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    name: string | null
    active: number | null
    description: string | null
    venue: string | null
    location: string | null
    notes: string | null
    telephone: string | null
    startDateTime: Date | null
    endDateTime: Date | null
    createAt: Date | null
    updatedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    name: string | null
    active: number | null
    description: string | null
    venue: string | null
    location: string | null
    notes: string | null
    telephone: string | null
    startDateTime: Date | null
    endDateTime: Date | null
    createAt: Date | null
    updatedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    name: number
    active: number
    description: number
    venue: number
    location: number
    notes: number
    telephone: number
    startDateTime: number
    endDateTime: number
    createAt: number
    updatedAt: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    active?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    active?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    name?: true
    active?: true
    description?: true
    venue?: true
    location?: true
    notes?: true
    telephone?: true
    startDateTime?: true
    endDateTime?: true
    createAt?: true
    updatedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    name?: true
    active?: true
    description?: true
    venue?: true
    location?: true
    notes?: true
    telephone?: true
    startDateTime?: true
    endDateTime?: true
    createAt?: true
    updatedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    name?: true
    active?: true
    description?: true
    venue?: true
    location?: true
    notes?: true
    telephone?: true
    startDateTime?: true
    endDateTime?: true
    createAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventAggregateArgs = {
    /**
     * Filter which Event to aggregate.
     * 
    **/
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     * 
    **/
    orderBy?: Enumerable<EventOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }


    
    
  export type EventGroupByArgs = {
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByInput>
    by: Array<EventScalarFieldEnum>
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }


  export type EventGroupByOutputType = {
    id: number
    name: string
    active: number
    description: string | null
    venue: string | null
    location: string | null
    notes: string | null
    telephone: string | null
    startDateTime: Date
    endDateTime: Date | null
    createAt: Date
    updatedAt: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Promise<
    Array<
      PickArray<EventGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], EventGroupByOutputType[P]> 
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      > 
    >


  export type EventSelect = {
    id?: boolean
    name?: boolean
    active?: boolean
    description?: boolean
    venue?: boolean
    location?: boolean
    notes?: boolean
    telephone?: boolean
    startDateTime?: boolean
    endDateTime?: boolean
    createAt?: boolean
    updatedAt?: boolean
    songs?: boolean | EventSongFindManyArgs
    _count?: boolean | EventCountOutputTypeArgs
  }

  export type EventInclude = {
    songs?: boolean | EventSongFindManyArgs
    _count?: boolean | EventCountOutputTypeArgs
  }

  export type EventGetPayload<
    S extends boolean | null | undefined | EventArgs,
    U = keyof S
      > = S extends true
        ? Event
    : S extends undefined
    ? never
    : S extends EventArgs | EventFindManyArgs
    ?'include' extends U
    ? Event  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'songs'
        ? Array < EventSongGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? EventCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Event ?Event [P]
  : 
          P extends 'songs'
        ? Array < EventSongGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? EventCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Event
  : Event


  type EventCountArgs = Merge<
    Omit<EventFindManyArgs, 'select' | 'include'> & {
      select?: EventCountAggregateInputType | true
    }
  >

  export interface EventDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Event'> extends True ? CheckSelect<T, Prisma__EventClient<Event>, Prisma__EventClient<EventGetPayload<T>>> : CheckSelect<T, Prisma__EventClient<Event | null >, Prisma__EventClient<EventGetPayload<T> | null >>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Event'> extends True ? CheckSelect<T, Prisma__EventClient<Event>, Prisma__EventClient<EventGetPayload<T>>> : CheckSelect<T, Prisma__EventClient<Event | null >, Prisma__EventClient<EventGetPayload<T> | null >>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventFindManyArgs>(
      args?: SelectSubset<T, EventFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Event>>, PrismaPromise<Array<EventGetPayload<T>>>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends EventCreateArgs>(
      args: SelectSubset<T, EventCreateArgs>
    ): CheckSelect<T, Prisma__EventClient<Event>, Prisma__EventClient<EventGetPayload<T>>>

    /**
     * Create many Events.
     *     @param {EventCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const event = await prisma.event.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventCreateManyArgs>(
      args?: SelectSubset<T, EventCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends EventDeleteArgs>(
      args: SelectSubset<T, EventDeleteArgs>
    ): CheckSelect<T, Prisma__EventClient<Event>, Prisma__EventClient<EventGetPayload<T>>>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUpdateArgs>(
      args: SelectSubset<T, EventUpdateArgs>
    ): CheckSelect<T, Prisma__EventClient<Event>, Prisma__EventClient<EventGetPayload<T>>>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventDeleteManyArgs>(
      args?: SelectSubset<T, EventDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUpdateManyArgs>(
      args: SelectSubset<T, EventUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends EventUpsertArgs>(
      args: SelectSubset<T, EventUpsertArgs>
    ): CheckSelect<T, Prisma__EventClient<Event>, Prisma__EventClient<EventGetPayload<T>>>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    songs<T extends EventSongFindManyArgs = {}>(args?: Subset<T, EventSongFindManyArgs>): CheckSelect<T, PrismaPromise<Array<EventSong>>, PrismaPromise<Array<EventSongGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventInclude | null
    /**
     * Throw an Error if a Event can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Event to fetch.
     * 
    **/
    where: EventWhereUniqueInput
  }


  /**
   * Event findFirst
   */
  export type EventFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventInclude | null
    /**
     * Throw an Error if a Event can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Event to fetch.
     * 
    **/
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     * 
    **/
    orderBy?: Enumerable<EventOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     * 
    **/
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     * 
    **/
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event findMany
   */
  export type EventFindManyArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventInclude | null
    /**
     * Filter, which Events to fetch.
     * 
    **/
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     * 
    **/
    orderBy?: Enumerable<EventOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     * 
    **/
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event create
   */
  export type EventCreateArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventInclude | null
    /**
     * The data needed to create a Event.
     * 
    **/
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }


  /**
   * Event createMany
   */
  export type EventCreateManyArgs = {
    data: Enumerable<EventCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Event update
   */
  export type EventUpdateArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventInclude | null
    /**
     * The data needed to update a Event.
     * 
    **/
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     * 
    **/
    where: EventWhereUniqueInput
  }


  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs = {
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    where?: EventWhereInput
  }


  /**
   * Event upsert
   */
  export type EventUpsertArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventInclude | null
    /**
     * The filter to search for the Event to update in case it exists.
     * 
    **/
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     * 
    **/
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }


  /**
   * Event delete
   */
  export type EventDeleteArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventInclude | null
    /**
     * Filter which Event to delete.
     * 
    **/
    where: EventWhereUniqueInput
  }


  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs = {
    where?: EventWhereInput
  }


  /**
   * Event without action
   */
  export type EventArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventInclude | null
  }



  /**
   * Model EventSong
   */


  export type AggregateEventSong = {
    _count: EventSongCountAggregateOutputType | null
    count: EventSongCountAggregateOutputType | null
    _avg: EventSongAvgAggregateOutputType | null
    avg: EventSongAvgAggregateOutputType | null
    _sum: EventSongSumAggregateOutputType | null
    sum: EventSongSumAggregateOutputType | null
    _min: EventSongMinAggregateOutputType | null
    min: EventSongMinAggregateOutputType | null
    _max: EventSongMaxAggregateOutputType | null
    max: EventSongMaxAggregateOutputType | null
  }

  export type EventSongAvgAggregateOutputType = {
    id: number | null
    eventId: number | null
    songId: number | null
    published: number | null
  }

  export type EventSongSumAggregateOutputType = {
    id: number | null
    eventId: number | null
    songId: number | null
    published: number | null
  }

  export type EventSongMinAggregateOutputType = {
    id: number | null
    eventId: number | null
    songId: number | null
    published: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventSongMaxAggregateOutputType = {
    id: number | null
    eventId: number | null
    songId: number | null
    published: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventSongCountAggregateOutputType = {
    id: number
    eventId: number
    songId: number
    published: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EventSongAvgAggregateInputType = {
    id?: true
    eventId?: true
    songId?: true
    published?: true
  }

  export type EventSongSumAggregateInputType = {
    id?: true
    eventId?: true
    songId?: true
    published?: true
  }

  export type EventSongMinAggregateInputType = {
    id?: true
    eventId?: true
    songId?: true
    published?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventSongMaxAggregateInputType = {
    id?: true
    eventId?: true
    songId?: true
    published?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventSongCountAggregateInputType = {
    id?: true
    eventId?: true
    songId?: true
    published?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventSongAggregateArgs = {
    /**
     * Filter which EventSong to aggregate.
     * 
    **/
    where?: EventSongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSongs to fetch.
     * 
    **/
    orderBy?: Enumerable<EventSongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EventSongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSongs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventSongs
    **/
    _count?: true | EventSongCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | EventSongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventSongAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: EventSongAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSongSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: EventSongSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventSongMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: EventSongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventSongMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: EventSongMaxAggregateInputType
  }

  export type GetEventSongAggregateType<T extends EventSongAggregateArgs> = {
        [P in keyof T & keyof AggregateEventSong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventSong[P]>
      : GetScalarType<T[P], AggregateEventSong[P]>
  }


    
    
  export type EventSongGroupByArgs = {
    where?: EventSongWhereInput
    orderBy?: Enumerable<EventSongOrderByInput>
    by: Array<EventSongScalarFieldEnum>
    having?: EventSongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventSongCountAggregateInputType | true
    _avg?: EventSongAvgAggregateInputType
    _sum?: EventSongSumAggregateInputType
    _min?: EventSongMinAggregateInputType
    _max?: EventSongMaxAggregateInputType
  }


  export type EventSongGroupByOutputType = {
    id: number
    eventId: number | null
    songId: number | null
    published: number
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: EventSongCountAggregateOutputType | null
    _avg: EventSongAvgAggregateOutputType | null
    _sum: EventSongSumAggregateOutputType | null
    _min: EventSongMinAggregateOutputType | null
    _max: EventSongMaxAggregateOutputType | null
  }

  type GetEventSongGroupByPayload<T extends EventSongGroupByArgs> = Promise<
    Array<
      PickArray<EventSongGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof EventSongGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], EventSongGroupByOutputType[P]> 
            : GetScalarType<T[P], EventSongGroupByOutputType[P]>
        }
      > 
    >


  export type EventSongSelect = {
    id?: boolean
    event?: boolean | EventArgs
    song?: boolean | SongArgs
    eventId?: boolean
    songId?: boolean
    published?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EventSongInclude = {
    event?: boolean | EventArgs
    song?: boolean | SongArgs
  }

  export type EventSongGetPayload<
    S extends boolean | null | undefined | EventSongArgs,
    U = keyof S
      > = S extends true
        ? EventSong
    : S extends undefined
    ? never
    : S extends EventSongArgs | EventSongFindManyArgs
    ?'include' extends U
    ? EventSong  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'event'
        ? EventGetPayload<S['include'][P]> | null :
        P extends 'song'
        ? SongGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof EventSong ?EventSong [P]
  : 
          P extends 'event'
        ? EventGetPayload<S['select'][P]> | null :
        P extends 'song'
        ? SongGetPayload<S['select'][P]> | null : never
  } 
    : EventSong
  : EventSong


  type EventSongCountArgs = Merge<
    Omit<EventSongFindManyArgs, 'select' | 'include'> & {
      select?: EventSongCountAggregateInputType | true
    }
  >

  export interface EventSongDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one EventSong that matches the filter.
     * @param {EventSongFindUniqueArgs} args - Arguments to find a EventSong
     * @example
     * // Get one EventSong
     * const eventSong = await prisma.eventSong.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventSongFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventSongFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EventSong'> extends True ? CheckSelect<T, Prisma__EventSongClient<EventSong>, Prisma__EventSongClient<EventSongGetPayload<T>>> : CheckSelect<T, Prisma__EventSongClient<EventSong | null >, Prisma__EventSongClient<EventSongGetPayload<T> | null >>

    /**
     * Find the first EventSong that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSongFindFirstArgs} args - Arguments to find a EventSong
     * @example
     * // Get one EventSong
     * const eventSong = await prisma.eventSong.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventSongFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventSongFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EventSong'> extends True ? CheckSelect<T, Prisma__EventSongClient<EventSong>, Prisma__EventSongClient<EventSongGetPayload<T>>> : CheckSelect<T, Prisma__EventSongClient<EventSong | null >, Prisma__EventSongClient<EventSongGetPayload<T> | null >>

    /**
     * Find zero or more EventSongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSongFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventSongs
     * const eventSongs = await prisma.eventSong.findMany()
     * 
     * // Get first 10 EventSongs
     * const eventSongs = await prisma.eventSong.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventSongWithIdOnly = await prisma.eventSong.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventSongFindManyArgs>(
      args?: SelectSubset<T, EventSongFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<EventSong>>, PrismaPromise<Array<EventSongGetPayload<T>>>>

    /**
     * Create a EventSong.
     * @param {EventSongCreateArgs} args - Arguments to create a EventSong.
     * @example
     * // Create one EventSong
     * const EventSong = await prisma.eventSong.create({
     *   data: {
     *     // ... data to create a EventSong
     *   }
     * })
     * 
    **/
    create<T extends EventSongCreateArgs>(
      args: SelectSubset<T, EventSongCreateArgs>
    ): CheckSelect<T, Prisma__EventSongClient<EventSong>, Prisma__EventSongClient<EventSongGetPayload<T>>>

    /**
     * Create many EventSongs.
     *     @param {EventSongCreateManyArgs} args - Arguments to create many EventSongs.
     *     @example
     *     // Create many EventSongs
     *     const eventSong = await prisma.eventSong.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventSongCreateManyArgs>(
      args?: SelectSubset<T, EventSongCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a EventSong.
     * @param {EventSongDeleteArgs} args - Arguments to delete one EventSong.
     * @example
     * // Delete one EventSong
     * const EventSong = await prisma.eventSong.delete({
     *   where: {
     *     // ... filter to delete one EventSong
     *   }
     * })
     * 
    **/
    delete<T extends EventSongDeleteArgs>(
      args: SelectSubset<T, EventSongDeleteArgs>
    ): CheckSelect<T, Prisma__EventSongClient<EventSong>, Prisma__EventSongClient<EventSongGetPayload<T>>>

    /**
     * Update one EventSong.
     * @param {EventSongUpdateArgs} args - Arguments to update one EventSong.
     * @example
     * // Update one EventSong
     * const eventSong = await prisma.eventSong.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventSongUpdateArgs>(
      args: SelectSubset<T, EventSongUpdateArgs>
    ): CheckSelect<T, Prisma__EventSongClient<EventSong>, Prisma__EventSongClient<EventSongGetPayload<T>>>

    /**
     * Delete zero or more EventSongs.
     * @param {EventSongDeleteManyArgs} args - Arguments to filter EventSongs to delete.
     * @example
     * // Delete a few EventSongs
     * const { count } = await prisma.eventSong.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventSongDeleteManyArgs>(
      args?: SelectSubset<T, EventSongDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventSongs
     * const eventSong = await prisma.eventSong.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventSongUpdateManyArgs>(
      args: SelectSubset<T, EventSongUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one EventSong.
     * @param {EventSongUpsertArgs} args - Arguments to update or create a EventSong.
     * @example
     * // Update or create a EventSong
     * const eventSong = await prisma.eventSong.upsert({
     *   create: {
     *     // ... data to create a EventSong
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventSong we want to update
     *   }
     * })
    **/
    upsert<T extends EventSongUpsertArgs>(
      args: SelectSubset<T, EventSongUpsertArgs>
    ): CheckSelect<T, Prisma__EventSongClient<EventSong>, Prisma__EventSongClient<EventSongGetPayload<T>>>

    /**
     * Count the number of EventSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSongCountArgs} args - Arguments to filter EventSongs to count.
     * @example
     * // Count the number of EventSongs
     * const count = await prisma.eventSong.count({
     *   where: {
     *     // ... the filter for the EventSongs we want to count
     *   }
     * })
    **/
    count<T extends EventSongCountArgs>(
      args?: Subset<T, EventSongCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventSongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventSong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventSongAggregateArgs>(args: Subset<T, EventSongAggregateArgs>): PrismaPromise<GetEventSongAggregateType<T>>

    /**
     * Group by EventSong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventSongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventSongGroupByArgs['orderBy'] }
        : { orderBy?: EventSongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventSongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventSongGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventSong.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventSongClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    event<T extends EventArgs = {}>(args?: Subset<T, EventArgs>): CheckSelect<T, Prisma__EventClient<Event | null >, Prisma__EventClient<EventGetPayload<T> | null >>;

    song<T extends SongArgs = {}>(args?: Subset<T, SongArgs>): CheckSelect<T, Prisma__SongClient<Song | null >, Prisma__SongClient<SongGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * EventSong findUnique
   */
  export type EventSongFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the EventSong
     * 
    **/
    select?: EventSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventSongInclude | null
    /**
     * Throw an Error if a EventSong can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which EventSong to fetch.
     * 
    **/
    where: EventSongWhereUniqueInput
  }


  /**
   * EventSong findFirst
   */
  export type EventSongFindFirstArgs = {
    /**
     * Select specific fields to fetch from the EventSong
     * 
    **/
    select?: EventSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventSongInclude | null
    /**
     * Throw an Error if a EventSong can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which EventSong to fetch.
     * 
    **/
    where?: EventSongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSongs to fetch.
     * 
    **/
    orderBy?: Enumerable<EventSongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventSongs.
     * 
    **/
    cursor?: EventSongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSongs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventSongs.
     * 
    **/
    distinct?: Enumerable<EventSongScalarFieldEnum>
  }


  /**
   * EventSong findMany
   */
  export type EventSongFindManyArgs = {
    /**
     * Select specific fields to fetch from the EventSong
     * 
    **/
    select?: EventSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventSongInclude | null
    /**
     * Filter, which EventSongs to fetch.
     * 
    **/
    where?: EventSongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSongs to fetch.
     * 
    **/
    orderBy?: Enumerable<EventSongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventSongs.
     * 
    **/
    cursor?: EventSongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSongs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EventSongScalarFieldEnum>
  }


  /**
   * EventSong create
   */
  export type EventSongCreateArgs = {
    /**
     * Select specific fields to fetch from the EventSong
     * 
    **/
    select?: EventSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventSongInclude | null
    /**
     * The data needed to create a EventSong.
     * 
    **/
    data: XOR<EventSongCreateInput, EventSongUncheckedCreateInput>
  }


  /**
   * EventSong createMany
   */
  export type EventSongCreateManyArgs = {
    data: Enumerable<EventSongCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EventSong update
   */
  export type EventSongUpdateArgs = {
    /**
     * Select specific fields to fetch from the EventSong
     * 
    **/
    select?: EventSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventSongInclude | null
    /**
     * The data needed to update a EventSong.
     * 
    **/
    data: XOR<EventSongUpdateInput, EventSongUncheckedUpdateInput>
    /**
     * Choose, which EventSong to update.
     * 
    **/
    where: EventSongWhereUniqueInput
  }


  /**
   * EventSong updateMany
   */
  export type EventSongUpdateManyArgs = {
    data: XOR<EventSongUpdateManyMutationInput, EventSongUncheckedUpdateManyInput>
    where?: EventSongWhereInput
  }


  /**
   * EventSong upsert
   */
  export type EventSongUpsertArgs = {
    /**
     * Select specific fields to fetch from the EventSong
     * 
    **/
    select?: EventSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventSongInclude | null
    /**
     * The filter to search for the EventSong to update in case it exists.
     * 
    **/
    where: EventSongWhereUniqueInput
    /**
     * In case the EventSong found by the `where` argument doesn't exist, create a new EventSong with this data.
     * 
    **/
    create: XOR<EventSongCreateInput, EventSongUncheckedCreateInput>
    /**
     * In case the EventSong was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EventSongUpdateInput, EventSongUncheckedUpdateInput>
  }


  /**
   * EventSong delete
   */
  export type EventSongDeleteArgs = {
    /**
     * Select specific fields to fetch from the EventSong
     * 
    **/
    select?: EventSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventSongInclude | null
    /**
     * Filter which EventSong to delete.
     * 
    **/
    where: EventSongWhereUniqueInput
  }


  /**
   * EventSong deleteMany
   */
  export type EventSongDeleteManyArgs = {
    where?: EventSongWhereInput
  }


  /**
   * EventSong without action
   */
  export type EventSongArgs = {
    /**
     * Select specific fields to fetch from the EventSong
     * 
    **/
    select?: EventSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventSongInclude | null
  }



  /**
   * Model Song
   */


  export type AggregateSong = {
    _count: SongCountAggregateOutputType | null
    count: SongCountAggregateOutputType | null
    _avg: SongAvgAggregateOutputType | null
    avg: SongAvgAggregateOutputType | null
    _sum: SongSumAggregateOutputType | null
    sum: SongSumAggregateOutputType | null
    _min: SongMinAggregateOutputType | null
    min: SongMinAggregateOutputType | null
    _max: SongMaxAggregateOutputType | null
    max: SongMaxAggregateOutputType | null
  }

  export type SongAvgAggregateOutputType = {
    id: number | null
    active: number | null
    tempoCd: number | null
  }

  export type SongSumAggregateOutputType = {
    id: number | null
    active: number | null
    tempoCd: number | null
  }

  export type SongMinAggregateOutputType = {
    id: number | null
    title: string | null
    active: number | null
    alias: string | null
    startKey: string | null
    tempoCd: number | null
    startWords: string | null
    arrangement: string | null
    tags: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SongMaxAggregateOutputType = {
    id: number | null
    title: string | null
    active: number | null
    alias: string | null
    startKey: string | null
    tempoCd: number | null
    startWords: string | null
    arrangement: string | null
    tags: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SongCountAggregateOutputType = {
    id: number
    title: number
    active: number
    alias: number
    startKey: number
    tempoCd: number
    startWords: number
    arrangement: number
    tags: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SongAvgAggregateInputType = {
    id?: true
    active?: true
    tempoCd?: true
  }

  export type SongSumAggregateInputType = {
    id?: true
    active?: true
    tempoCd?: true
  }

  export type SongMinAggregateInputType = {
    id?: true
    title?: true
    active?: true
    alias?: true
    startKey?: true
    tempoCd?: true
    startWords?: true
    arrangement?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SongMaxAggregateInputType = {
    id?: true
    title?: true
    active?: true
    alias?: true
    startKey?: true
    tempoCd?: true
    startWords?: true
    arrangement?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SongCountAggregateInputType = {
    id?: true
    title?: true
    active?: true
    alias?: true
    startKey?: true
    tempoCd?: true
    startWords?: true
    arrangement?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SongAggregateArgs = {
    /**
     * Filter which Song to aggregate.
     * 
    **/
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     * 
    **/
    orderBy?: Enumerable<SongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Songs
    **/
    _count?: true | SongCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | SongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SongAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: SongAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SongSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: SongSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SongMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: SongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SongMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: SongMaxAggregateInputType
  }

  export type GetSongAggregateType<T extends SongAggregateArgs> = {
        [P in keyof T & keyof AggregateSong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSong[P]>
      : GetScalarType<T[P], AggregateSong[P]>
  }


    
    
  export type SongGroupByArgs = {
    where?: SongWhereInput
    orderBy?: Enumerable<SongOrderByInput>
    by: Array<SongScalarFieldEnum>
    having?: SongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SongCountAggregateInputType | true
    _avg?: SongAvgAggregateInputType
    _sum?: SongSumAggregateInputType
    _min?: SongMinAggregateInputType
    _max?: SongMaxAggregateInputType
  }


  export type SongGroupByOutputType = {
    id: number
    title: string
    active: number
    alias: string | null
    startKey: string | null
    tempoCd: number | null
    startWords: string | null
    arrangement: string | null
    tags: string | null
    createdAt: Date
    updatedAt: Date
    _count: SongCountAggregateOutputType | null
    _avg: SongAvgAggregateOutputType | null
    _sum: SongSumAggregateOutputType | null
    _min: SongMinAggregateOutputType | null
    _max: SongMaxAggregateOutputType | null
  }

  type GetSongGroupByPayload<T extends SongGroupByArgs> = Promise<
    Array<
      PickArray<SongGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof SongGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], SongGroupByOutputType[P]> 
            : GetScalarType<T[P], SongGroupByOutputType[P]>
        }
      > 
    >


  export type SongSelect = {
    id?: boolean
    title?: boolean
    active?: boolean
    alias?: boolean
    startKey?: boolean
    tempoCd?: boolean
    startWords?: boolean
    arrangement?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    events?: boolean | EventSongFindManyArgs
    instruments?: boolean | InstrumentSongFindManyArgs
    _count?: boolean | SongCountOutputTypeArgs
  }

  export type SongInclude = {
    events?: boolean | EventSongFindManyArgs
    instruments?: boolean | InstrumentSongFindManyArgs
    _count?: boolean | SongCountOutputTypeArgs
  }

  export type SongGetPayload<
    S extends boolean | null | undefined | SongArgs,
    U = keyof S
      > = S extends true
        ? Song
    : S extends undefined
    ? never
    : S extends SongArgs | SongFindManyArgs
    ?'include' extends U
    ? Song  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'events'
        ? Array < EventSongGetPayload<S['include'][P]>>  :
        P extends 'instruments'
        ? Array < InstrumentSongGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? SongCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Song ?Song [P]
  : 
          P extends 'events'
        ? Array < EventSongGetPayload<S['select'][P]>>  :
        P extends 'instruments'
        ? Array < InstrumentSongGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? SongCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Song
  : Song


  type SongCountArgs = Merge<
    Omit<SongFindManyArgs, 'select' | 'include'> & {
      select?: SongCountAggregateInputType | true
    }
  >

  export interface SongDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Song that matches the filter.
     * @param {SongFindUniqueArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SongFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SongFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Song'> extends True ? CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>> : CheckSelect<T, Prisma__SongClient<Song | null >, Prisma__SongClient<SongGetPayload<T> | null >>

    /**
     * Find the first Song that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindFirstArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SongFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SongFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Song'> extends True ? CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>> : CheckSelect<T, Prisma__SongClient<Song | null >, Prisma__SongClient<SongGetPayload<T> | null >>

    /**
     * Find zero or more Songs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Songs
     * const songs = await prisma.song.findMany()
     * 
     * // Get first 10 Songs
     * const songs = await prisma.song.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const songWithIdOnly = await prisma.song.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SongFindManyArgs>(
      args?: SelectSubset<T, SongFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Song>>, PrismaPromise<Array<SongGetPayload<T>>>>

    /**
     * Create a Song.
     * @param {SongCreateArgs} args - Arguments to create a Song.
     * @example
     * // Create one Song
     * const Song = await prisma.song.create({
     *   data: {
     *     // ... data to create a Song
     *   }
     * })
     * 
    **/
    create<T extends SongCreateArgs>(
      args: SelectSubset<T, SongCreateArgs>
    ): CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>>

    /**
     * Create many Songs.
     *     @param {SongCreateManyArgs} args - Arguments to create many Songs.
     *     @example
     *     // Create many Songs
     *     const song = await prisma.song.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SongCreateManyArgs>(
      args?: SelectSubset<T, SongCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Song.
     * @param {SongDeleteArgs} args - Arguments to delete one Song.
     * @example
     * // Delete one Song
     * const Song = await prisma.song.delete({
     *   where: {
     *     // ... filter to delete one Song
     *   }
     * })
     * 
    **/
    delete<T extends SongDeleteArgs>(
      args: SelectSubset<T, SongDeleteArgs>
    ): CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>>

    /**
     * Update one Song.
     * @param {SongUpdateArgs} args - Arguments to update one Song.
     * @example
     * // Update one Song
     * const song = await prisma.song.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SongUpdateArgs>(
      args: SelectSubset<T, SongUpdateArgs>
    ): CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>>

    /**
     * Delete zero or more Songs.
     * @param {SongDeleteManyArgs} args - Arguments to filter Songs to delete.
     * @example
     * // Delete a few Songs
     * const { count } = await prisma.song.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SongDeleteManyArgs>(
      args?: SelectSubset<T, SongDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Songs
     * const song = await prisma.song.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SongUpdateManyArgs>(
      args: SelectSubset<T, SongUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Song.
     * @param {SongUpsertArgs} args - Arguments to update or create a Song.
     * @example
     * // Update or create a Song
     * const song = await prisma.song.upsert({
     *   create: {
     *     // ... data to create a Song
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Song we want to update
     *   }
     * })
    **/
    upsert<T extends SongUpsertArgs>(
      args: SelectSubset<T, SongUpsertArgs>
    ): CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>>

    /**
     * Count the number of Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongCountArgs} args - Arguments to filter Songs to count.
     * @example
     * // Count the number of Songs
     * const count = await prisma.song.count({
     *   where: {
     *     // ... the filter for the Songs we want to count
     *   }
     * })
    **/
    count<T extends SongCountArgs>(
      args?: Subset<T, SongCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Song.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SongAggregateArgs>(args: Subset<T, SongAggregateArgs>): PrismaPromise<GetSongAggregateType<T>>

    /**
     * Group by Song.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SongGroupByArgs['orderBy'] }
        : { orderBy?: SongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSongGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Song.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SongClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    events<T extends EventSongFindManyArgs = {}>(args?: Subset<T, EventSongFindManyArgs>): CheckSelect<T, PrismaPromise<Array<EventSong>>, PrismaPromise<Array<EventSongGetPayload<T>>>>;

    instruments<T extends InstrumentSongFindManyArgs = {}>(args?: Subset<T, InstrumentSongFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InstrumentSong>>, PrismaPromise<Array<InstrumentSongGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Song findUnique
   */
  export type SongFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Song
     * 
    **/
    select?: SongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SongInclude | null
    /**
     * Throw an Error if a Song can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Song to fetch.
     * 
    **/
    where: SongWhereUniqueInput
  }


  /**
   * Song findFirst
   */
  export type SongFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Song
     * 
    **/
    select?: SongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SongInclude | null
    /**
     * Throw an Error if a Song can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Song to fetch.
     * 
    **/
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     * 
    **/
    orderBy?: Enumerable<SongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Songs.
     * 
    **/
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Songs.
     * 
    **/
    distinct?: Enumerable<SongScalarFieldEnum>
  }


  /**
   * Song findMany
   */
  export type SongFindManyArgs = {
    /**
     * Select specific fields to fetch from the Song
     * 
    **/
    select?: SongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SongInclude | null
    /**
     * Filter, which Songs to fetch.
     * 
    **/
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     * 
    **/
    orderBy?: Enumerable<SongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Songs.
     * 
    **/
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SongScalarFieldEnum>
  }


  /**
   * Song create
   */
  export type SongCreateArgs = {
    /**
     * Select specific fields to fetch from the Song
     * 
    **/
    select?: SongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SongInclude | null
    /**
     * The data needed to create a Song.
     * 
    **/
    data: XOR<SongCreateInput, SongUncheckedCreateInput>
  }


  /**
   * Song createMany
   */
  export type SongCreateManyArgs = {
    data: Enumerable<SongCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Song update
   */
  export type SongUpdateArgs = {
    /**
     * Select specific fields to fetch from the Song
     * 
    **/
    select?: SongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SongInclude | null
    /**
     * The data needed to update a Song.
     * 
    **/
    data: XOR<SongUpdateInput, SongUncheckedUpdateInput>
    /**
     * Choose, which Song to update.
     * 
    **/
    where: SongWhereUniqueInput
  }


  /**
   * Song updateMany
   */
  export type SongUpdateManyArgs = {
    data: XOR<SongUpdateManyMutationInput, SongUncheckedUpdateManyInput>
    where?: SongWhereInput
  }


  /**
   * Song upsert
   */
  export type SongUpsertArgs = {
    /**
     * Select specific fields to fetch from the Song
     * 
    **/
    select?: SongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SongInclude | null
    /**
     * The filter to search for the Song to update in case it exists.
     * 
    **/
    where: SongWhereUniqueInput
    /**
     * In case the Song found by the `where` argument doesn't exist, create a new Song with this data.
     * 
    **/
    create: XOR<SongCreateInput, SongUncheckedCreateInput>
    /**
     * In case the Song was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SongUpdateInput, SongUncheckedUpdateInput>
  }


  /**
   * Song delete
   */
  export type SongDeleteArgs = {
    /**
     * Select specific fields to fetch from the Song
     * 
    **/
    select?: SongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SongInclude | null
    /**
     * Filter which Song to delete.
     * 
    **/
    where: SongWhereUniqueInput
  }


  /**
   * Song deleteMany
   */
  export type SongDeleteManyArgs = {
    where?: SongWhereInput
  }


  /**
   * Song without action
   */
  export type SongArgs = {
    /**
     * Select specific fields to fetch from the Song
     * 
    **/
    select?: SongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SongInclude | null
  }



  /**
   * Model Instrument
   */


  export type AggregateInstrument = {
    _count: InstrumentCountAggregateOutputType | null
    count: InstrumentCountAggregateOutputType | null
    _avg: InstrumentAvgAggregateOutputType | null
    avg: InstrumentAvgAggregateOutputType | null
    _sum: InstrumentSumAggregateOutputType | null
    sum: InstrumentSumAggregateOutputType | null
    _min: InstrumentMinAggregateOutputType | null
    min: InstrumentMinAggregateOutputType | null
    _max: InstrumentMaxAggregateOutputType | null
    max: InstrumentMaxAggregateOutputType | null
  }

  export type InstrumentAvgAggregateOutputType = {
    id: number | null
    active: number | null
  }

  export type InstrumentSumAggregateOutputType = {
    id: number | null
    active: number | null
  }

  export type InstrumentMinAggregateOutputType = {
    id: number | null
    name: string | null
    active: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstrumentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    active: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstrumentCountAggregateOutputType = {
    id: number
    name: number
    active: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InstrumentAvgAggregateInputType = {
    id?: true
    active?: true
  }

  export type InstrumentSumAggregateInputType = {
    id?: true
    active?: true
  }

  export type InstrumentMinAggregateInputType = {
    id?: true
    name?: true
    active?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstrumentMaxAggregateInputType = {
    id?: true
    name?: true
    active?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstrumentCountAggregateInputType = {
    id?: true
    name?: true
    active?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InstrumentAggregateArgs = {
    /**
     * Filter which Instrument to aggregate.
     * 
    **/
    where?: InstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instruments to fetch.
     * 
    **/
    orderBy?: Enumerable<InstrumentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instruments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instruments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instruments
    **/
    _count?: true | InstrumentCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | InstrumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstrumentAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: InstrumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstrumentSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: InstrumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstrumentMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: InstrumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstrumentMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: InstrumentMaxAggregateInputType
  }

  export type GetInstrumentAggregateType<T extends InstrumentAggregateArgs> = {
        [P in keyof T & keyof AggregateInstrument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstrument[P]>
      : GetScalarType<T[P], AggregateInstrument[P]>
  }


    
    
  export type InstrumentGroupByArgs = {
    where?: InstrumentWhereInput
    orderBy?: Enumerable<InstrumentOrderByInput>
    by: Array<InstrumentScalarFieldEnum>
    having?: InstrumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstrumentCountAggregateInputType | true
    _avg?: InstrumentAvgAggregateInputType
    _sum?: InstrumentSumAggregateInputType
    _min?: InstrumentMinAggregateInputType
    _max?: InstrumentMaxAggregateInputType
  }


  export type InstrumentGroupByOutputType = {
    id: number
    name: string
    active: number
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: InstrumentCountAggregateOutputType | null
    _avg: InstrumentAvgAggregateOutputType | null
    _sum: InstrumentSumAggregateOutputType | null
    _min: InstrumentMinAggregateOutputType | null
    _max: InstrumentMaxAggregateOutputType | null
  }

  type GetInstrumentGroupByPayload<T extends InstrumentGroupByArgs> = Promise<
    Array<
      PickArray<InstrumentGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof InstrumentGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], InstrumentGroupByOutputType[P]> 
            : GetScalarType<T[P], InstrumentGroupByOutputType[P]>
        }
      > 
    >


  export type InstrumentSelect = {
    id?: boolean
    name?: boolean
    active?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    songs?: boolean | InstrumentSongFindManyArgs
    _count?: boolean | InstrumentCountOutputTypeArgs
  }

  export type InstrumentInclude = {
    songs?: boolean | InstrumentSongFindManyArgs
    _count?: boolean | InstrumentCountOutputTypeArgs
  }

  export type InstrumentGetPayload<
    S extends boolean | null | undefined | InstrumentArgs,
    U = keyof S
      > = S extends true
        ? Instrument
    : S extends undefined
    ? never
    : S extends InstrumentArgs | InstrumentFindManyArgs
    ?'include' extends U
    ? Instrument  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'songs'
        ? Array < InstrumentSongGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? InstrumentCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Instrument ?Instrument [P]
  : 
          P extends 'songs'
        ? Array < InstrumentSongGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? InstrumentCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Instrument
  : Instrument


  type InstrumentCountArgs = Merge<
    Omit<InstrumentFindManyArgs, 'select' | 'include'> & {
      select?: InstrumentCountAggregateInputType | true
    }
  >

  export interface InstrumentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Instrument that matches the filter.
     * @param {InstrumentFindUniqueArgs} args - Arguments to find a Instrument
     * @example
     * // Get one Instrument
     * const instrument = await prisma.instrument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InstrumentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InstrumentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Instrument'> extends True ? CheckSelect<T, Prisma__InstrumentClient<Instrument>, Prisma__InstrumentClient<InstrumentGetPayload<T>>> : CheckSelect<T, Prisma__InstrumentClient<Instrument | null >, Prisma__InstrumentClient<InstrumentGetPayload<T> | null >>

    /**
     * Find the first Instrument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentFindFirstArgs} args - Arguments to find a Instrument
     * @example
     * // Get one Instrument
     * const instrument = await prisma.instrument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InstrumentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InstrumentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Instrument'> extends True ? CheckSelect<T, Prisma__InstrumentClient<Instrument>, Prisma__InstrumentClient<InstrumentGetPayload<T>>> : CheckSelect<T, Prisma__InstrumentClient<Instrument | null >, Prisma__InstrumentClient<InstrumentGetPayload<T> | null >>

    /**
     * Find zero or more Instruments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instruments
     * const instruments = await prisma.instrument.findMany()
     * 
     * // Get first 10 Instruments
     * const instruments = await prisma.instrument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instrumentWithIdOnly = await prisma.instrument.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InstrumentFindManyArgs>(
      args?: SelectSubset<T, InstrumentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Instrument>>, PrismaPromise<Array<InstrumentGetPayload<T>>>>

    /**
     * Create a Instrument.
     * @param {InstrumentCreateArgs} args - Arguments to create a Instrument.
     * @example
     * // Create one Instrument
     * const Instrument = await prisma.instrument.create({
     *   data: {
     *     // ... data to create a Instrument
     *   }
     * })
     * 
    **/
    create<T extends InstrumentCreateArgs>(
      args: SelectSubset<T, InstrumentCreateArgs>
    ): CheckSelect<T, Prisma__InstrumentClient<Instrument>, Prisma__InstrumentClient<InstrumentGetPayload<T>>>

    /**
     * Create many Instruments.
     *     @param {InstrumentCreateManyArgs} args - Arguments to create many Instruments.
     *     @example
     *     // Create many Instruments
     *     const instrument = await prisma.instrument.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InstrumentCreateManyArgs>(
      args?: SelectSubset<T, InstrumentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Instrument.
     * @param {InstrumentDeleteArgs} args - Arguments to delete one Instrument.
     * @example
     * // Delete one Instrument
     * const Instrument = await prisma.instrument.delete({
     *   where: {
     *     // ... filter to delete one Instrument
     *   }
     * })
     * 
    **/
    delete<T extends InstrumentDeleteArgs>(
      args: SelectSubset<T, InstrumentDeleteArgs>
    ): CheckSelect<T, Prisma__InstrumentClient<Instrument>, Prisma__InstrumentClient<InstrumentGetPayload<T>>>

    /**
     * Update one Instrument.
     * @param {InstrumentUpdateArgs} args - Arguments to update one Instrument.
     * @example
     * // Update one Instrument
     * const instrument = await prisma.instrument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InstrumentUpdateArgs>(
      args: SelectSubset<T, InstrumentUpdateArgs>
    ): CheckSelect<T, Prisma__InstrumentClient<Instrument>, Prisma__InstrumentClient<InstrumentGetPayload<T>>>

    /**
     * Delete zero or more Instruments.
     * @param {InstrumentDeleteManyArgs} args - Arguments to filter Instruments to delete.
     * @example
     * // Delete a few Instruments
     * const { count } = await prisma.instrument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InstrumentDeleteManyArgs>(
      args?: SelectSubset<T, InstrumentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instruments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instruments
     * const instrument = await prisma.instrument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InstrumentUpdateManyArgs>(
      args: SelectSubset<T, InstrumentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Instrument.
     * @param {InstrumentUpsertArgs} args - Arguments to update or create a Instrument.
     * @example
     * // Update or create a Instrument
     * const instrument = await prisma.instrument.upsert({
     *   create: {
     *     // ... data to create a Instrument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instrument we want to update
     *   }
     * })
    **/
    upsert<T extends InstrumentUpsertArgs>(
      args: SelectSubset<T, InstrumentUpsertArgs>
    ): CheckSelect<T, Prisma__InstrumentClient<Instrument>, Prisma__InstrumentClient<InstrumentGetPayload<T>>>

    /**
     * Count the number of Instruments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentCountArgs} args - Arguments to filter Instruments to count.
     * @example
     * // Count the number of Instruments
     * const count = await prisma.instrument.count({
     *   where: {
     *     // ... the filter for the Instruments we want to count
     *   }
     * })
    **/
    count<T extends InstrumentCountArgs>(
      args?: Subset<T, InstrumentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstrumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instrument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstrumentAggregateArgs>(args: Subset<T, InstrumentAggregateArgs>): PrismaPromise<GetInstrumentAggregateType<T>>

    /**
     * Group by Instrument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstrumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstrumentGroupByArgs['orderBy'] }
        : { orderBy?: InstrumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstrumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstrumentGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instrument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InstrumentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    songs<T extends InstrumentSongFindManyArgs = {}>(args?: Subset<T, InstrumentSongFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InstrumentSong>>, PrismaPromise<Array<InstrumentSongGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Instrument findUnique
   */
  export type InstrumentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Instrument
     * 
    **/
    select?: InstrumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentInclude | null
    /**
     * Throw an Error if a Instrument can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Instrument to fetch.
     * 
    **/
    where: InstrumentWhereUniqueInput
  }


  /**
   * Instrument findFirst
   */
  export type InstrumentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Instrument
     * 
    **/
    select?: InstrumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentInclude | null
    /**
     * Throw an Error if a Instrument can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Instrument to fetch.
     * 
    **/
    where?: InstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instruments to fetch.
     * 
    **/
    orderBy?: Enumerable<InstrumentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instruments.
     * 
    **/
    cursor?: InstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instruments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instruments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instruments.
     * 
    **/
    distinct?: Enumerable<InstrumentScalarFieldEnum>
  }


  /**
   * Instrument findMany
   */
  export type InstrumentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Instrument
     * 
    **/
    select?: InstrumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentInclude | null
    /**
     * Filter, which Instruments to fetch.
     * 
    **/
    where?: InstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instruments to fetch.
     * 
    **/
    orderBy?: Enumerable<InstrumentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instruments.
     * 
    **/
    cursor?: InstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instruments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instruments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InstrumentScalarFieldEnum>
  }


  /**
   * Instrument create
   */
  export type InstrumentCreateArgs = {
    /**
     * Select specific fields to fetch from the Instrument
     * 
    **/
    select?: InstrumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentInclude | null
    /**
     * The data needed to create a Instrument.
     * 
    **/
    data: XOR<InstrumentCreateInput, InstrumentUncheckedCreateInput>
  }


  /**
   * Instrument createMany
   */
  export type InstrumentCreateManyArgs = {
    data: Enumerable<InstrumentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Instrument update
   */
  export type InstrumentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Instrument
     * 
    **/
    select?: InstrumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentInclude | null
    /**
     * The data needed to update a Instrument.
     * 
    **/
    data: XOR<InstrumentUpdateInput, InstrumentUncheckedUpdateInput>
    /**
     * Choose, which Instrument to update.
     * 
    **/
    where: InstrumentWhereUniqueInput
  }


  /**
   * Instrument updateMany
   */
  export type InstrumentUpdateManyArgs = {
    data: XOR<InstrumentUpdateManyMutationInput, InstrumentUncheckedUpdateManyInput>
    where?: InstrumentWhereInput
  }


  /**
   * Instrument upsert
   */
  export type InstrumentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Instrument
     * 
    **/
    select?: InstrumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentInclude | null
    /**
     * The filter to search for the Instrument to update in case it exists.
     * 
    **/
    where: InstrumentWhereUniqueInput
    /**
     * In case the Instrument found by the `where` argument doesn't exist, create a new Instrument with this data.
     * 
    **/
    create: XOR<InstrumentCreateInput, InstrumentUncheckedCreateInput>
    /**
     * In case the Instrument was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InstrumentUpdateInput, InstrumentUncheckedUpdateInput>
  }


  /**
   * Instrument delete
   */
  export type InstrumentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Instrument
     * 
    **/
    select?: InstrumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentInclude | null
    /**
     * Filter which Instrument to delete.
     * 
    **/
    where: InstrumentWhereUniqueInput
  }


  /**
   * Instrument deleteMany
   */
  export type InstrumentDeleteManyArgs = {
    where?: InstrumentWhereInput
  }


  /**
   * Instrument without action
   */
  export type InstrumentArgs = {
    /**
     * Select specific fields to fetch from the Instrument
     * 
    **/
    select?: InstrumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentInclude | null
  }



  /**
   * Model InstrumentSong
   */


  export type AggregateInstrumentSong = {
    _count: InstrumentSongCountAggregateOutputType | null
    count: InstrumentSongCountAggregateOutputType | null
    _avg: InstrumentSongAvgAggregateOutputType | null
    avg: InstrumentSongAvgAggregateOutputType | null
    _sum: InstrumentSongSumAggregateOutputType | null
    sum: InstrumentSongSumAggregateOutputType | null
    _min: InstrumentSongMinAggregateOutputType | null
    min: InstrumentSongMinAggregateOutputType | null
    _max: InstrumentSongMaxAggregateOutputType | null
    max: InstrumentSongMaxAggregateOutputType | null
  }

  export type InstrumentSongAvgAggregateOutputType = {
    id: number | null
    songId: number | null
    instrumentId: number | null
  }

  export type InstrumentSongSumAggregateOutputType = {
    id: number | null
    songId: number | null
    instrumentId: number | null
  }

  export type InstrumentSongMinAggregateOutputType = {
    id: number | null
    notes: string | null
    words: string | null
    mimeType: string | null
    file: string | null
    songId: number | null
    instrumentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstrumentSongMaxAggregateOutputType = {
    id: number | null
    notes: string | null
    words: string | null
    mimeType: string | null
    file: string | null
    songId: number | null
    instrumentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstrumentSongCountAggregateOutputType = {
    id: number
    notes: number
    words: number
    mimeType: number
    file: number
    songId: number
    instrumentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InstrumentSongAvgAggregateInputType = {
    id?: true
    songId?: true
    instrumentId?: true
  }

  export type InstrumentSongSumAggregateInputType = {
    id?: true
    songId?: true
    instrumentId?: true
  }

  export type InstrumentSongMinAggregateInputType = {
    id?: true
    notes?: true
    words?: true
    mimeType?: true
    file?: true
    songId?: true
    instrumentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstrumentSongMaxAggregateInputType = {
    id?: true
    notes?: true
    words?: true
    mimeType?: true
    file?: true
    songId?: true
    instrumentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstrumentSongCountAggregateInputType = {
    id?: true
    notes?: true
    words?: true
    mimeType?: true
    file?: true
    songId?: true
    instrumentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InstrumentSongAggregateArgs = {
    /**
     * Filter which InstrumentSong to aggregate.
     * 
    **/
    where?: InstrumentSongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstrumentSongs to fetch.
     * 
    **/
    orderBy?: Enumerable<InstrumentSongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InstrumentSongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstrumentSongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstrumentSongs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InstrumentSongs
    **/
    _count?: true | InstrumentSongCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | InstrumentSongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstrumentSongAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: InstrumentSongAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstrumentSongSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: InstrumentSongSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstrumentSongMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: InstrumentSongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstrumentSongMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: InstrumentSongMaxAggregateInputType
  }

  export type GetInstrumentSongAggregateType<T extends InstrumentSongAggregateArgs> = {
        [P in keyof T & keyof AggregateInstrumentSong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstrumentSong[P]>
      : GetScalarType<T[P], AggregateInstrumentSong[P]>
  }


    
    
  export type InstrumentSongGroupByArgs = {
    where?: InstrumentSongWhereInput
    orderBy?: Enumerable<InstrumentSongOrderByInput>
    by: Array<InstrumentSongScalarFieldEnum>
    having?: InstrumentSongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstrumentSongCountAggregateInputType | true
    _avg?: InstrumentSongAvgAggregateInputType
    _sum?: InstrumentSongSumAggregateInputType
    _min?: InstrumentSongMinAggregateInputType
    _max?: InstrumentSongMaxAggregateInputType
  }


  export type InstrumentSongGroupByOutputType = {
    id: number
    notes: string | null
    words: string | null
    mimeType: string | null
    file: string | null
    songId: number | null
    instrumentId: number | null
    createdAt: Date
    updatedAt: Date
    _count: InstrumentSongCountAggregateOutputType | null
    _avg: InstrumentSongAvgAggregateOutputType | null
    _sum: InstrumentSongSumAggregateOutputType | null
    _min: InstrumentSongMinAggregateOutputType | null
    _max: InstrumentSongMaxAggregateOutputType | null
  }

  type GetInstrumentSongGroupByPayload<T extends InstrumentSongGroupByArgs> = Promise<
    Array<
      PickArray<InstrumentSongGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof InstrumentSongGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], InstrumentSongGroupByOutputType[P]> 
            : GetScalarType<T[P], InstrumentSongGroupByOutputType[P]>
        }
      > 
    >


  export type InstrumentSongSelect = {
    id?: boolean
    notes?: boolean
    words?: boolean
    mimeType?: boolean
    file?: boolean
    instrument?: boolean | InstrumentArgs
    song?: boolean | SongArgs
    songId?: boolean
    instrumentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InstrumentSongInclude = {
    instrument?: boolean | InstrumentArgs
    song?: boolean | SongArgs
  }

  export type InstrumentSongGetPayload<
    S extends boolean | null | undefined | InstrumentSongArgs,
    U = keyof S
      > = S extends true
        ? InstrumentSong
    : S extends undefined
    ? never
    : S extends InstrumentSongArgs | InstrumentSongFindManyArgs
    ?'include' extends U
    ? InstrumentSong  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'instrument'
        ? InstrumentGetPayload<S['include'][P]> | null :
        P extends 'song'
        ? SongGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof InstrumentSong ?InstrumentSong [P]
  : 
          P extends 'instrument'
        ? InstrumentGetPayload<S['select'][P]> | null :
        P extends 'song'
        ? SongGetPayload<S['select'][P]> | null : never
  } 
    : InstrumentSong
  : InstrumentSong


  type InstrumentSongCountArgs = Merge<
    Omit<InstrumentSongFindManyArgs, 'select' | 'include'> & {
      select?: InstrumentSongCountAggregateInputType | true
    }
  >

  export interface InstrumentSongDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InstrumentSong that matches the filter.
     * @param {InstrumentSongFindUniqueArgs} args - Arguments to find a InstrumentSong
     * @example
     * // Get one InstrumentSong
     * const instrumentSong = await prisma.instrumentSong.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InstrumentSongFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InstrumentSongFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InstrumentSong'> extends True ? CheckSelect<T, Prisma__InstrumentSongClient<InstrumentSong>, Prisma__InstrumentSongClient<InstrumentSongGetPayload<T>>> : CheckSelect<T, Prisma__InstrumentSongClient<InstrumentSong | null >, Prisma__InstrumentSongClient<InstrumentSongGetPayload<T> | null >>

    /**
     * Find the first InstrumentSong that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentSongFindFirstArgs} args - Arguments to find a InstrumentSong
     * @example
     * // Get one InstrumentSong
     * const instrumentSong = await prisma.instrumentSong.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InstrumentSongFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InstrumentSongFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InstrumentSong'> extends True ? CheckSelect<T, Prisma__InstrumentSongClient<InstrumentSong>, Prisma__InstrumentSongClient<InstrumentSongGetPayload<T>>> : CheckSelect<T, Prisma__InstrumentSongClient<InstrumentSong | null >, Prisma__InstrumentSongClient<InstrumentSongGetPayload<T> | null >>

    /**
     * Find zero or more InstrumentSongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentSongFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InstrumentSongs
     * const instrumentSongs = await prisma.instrumentSong.findMany()
     * 
     * // Get first 10 InstrumentSongs
     * const instrumentSongs = await prisma.instrumentSong.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instrumentSongWithIdOnly = await prisma.instrumentSong.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InstrumentSongFindManyArgs>(
      args?: SelectSubset<T, InstrumentSongFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InstrumentSong>>, PrismaPromise<Array<InstrumentSongGetPayload<T>>>>

    /**
     * Create a InstrumentSong.
     * @param {InstrumentSongCreateArgs} args - Arguments to create a InstrumentSong.
     * @example
     * // Create one InstrumentSong
     * const InstrumentSong = await prisma.instrumentSong.create({
     *   data: {
     *     // ... data to create a InstrumentSong
     *   }
     * })
     * 
    **/
    create<T extends InstrumentSongCreateArgs>(
      args: SelectSubset<T, InstrumentSongCreateArgs>
    ): CheckSelect<T, Prisma__InstrumentSongClient<InstrumentSong>, Prisma__InstrumentSongClient<InstrumentSongGetPayload<T>>>

    /**
     * Create many InstrumentSongs.
     *     @param {InstrumentSongCreateManyArgs} args - Arguments to create many InstrumentSongs.
     *     @example
     *     // Create many InstrumentSongs
     *     const instrumentSong = await prisma.instrumentSong.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InstrumentSongCreateManyArgs>(
      args?: SelectSubset<T, InstrumentSongCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InstrumentSong.
     * @param {InstrumentSongDeleteArgs} args - Arguments to delete one InstrumentSong.
     * @example
     * // Delete one InstrumentSong
     * const InstrumentSong = await prisma.instrumentSong.delete({
     *   where: {
     *     // ... filter to delete one InstrumentSong
     *   }
     * })
     * 
    **/
    delete<T extends InstrumentSongDeleteArgs>(
      args: SelectSubset<T, InstrumentSongDeleteArgs>
    ): CheckSelect<T, Prisma__InstrumentSongClient<InstrumentSong>, Prisma__InstrumentSongClient<InstrumentSongGetPayload<T>>>

    /**
     * Update one InstrumentSong.
     * @param {InstrumentSongUpdateArgs} args - Arguments to update one InstrumentSong.
     * @example
     * // Update one InstrumentSong
     * const instrumentSong = await prisma.instrumentSong.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InstrumentSongUpdateArgs>(
      args: SelectSubset<T, InstrumentSongUpdateArgs>
    ): CheckSelect<T, Prisma__InstrumentSongClient<InstrumentSong>, Prisma__InstrumentSongClient<InstrumentSongGetPayload<T>>>

    /**
     * Delete zero or more InstrumentSongs.
     * @param {InstrumentSongDeleteManyArgs} args - Arguments to filter InstrumentSongs to delete.
     * @example
     * // Delete a few InstrumentSongs
     * const { count } = await prisma.instrumentSong.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InstrumentSongDeleteManyArgs>(
      args?: SelectSubset<T, InstrumentSongDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstrumentSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentSongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InstrumentSongs
     * const instrumentSong = await prisma.instrumentSong.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InstrumentSongUpdateManyArgs>(
      args: SelectSubset<T, InstrumentSongUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InstrumentSong.
     * @param {InstrumentSongUpsertArgs} args - Arguments to update or create a InstrumentSong.
     * @example
     * // Update or create a InstrumentSong
     * const instrumentSong = await prisma.instrumentSong.upsert({
     *   create: {
     *     // ... data to create a InstrumentSong
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InstrumentSong we want to update
     *   }
     * })
    **/
    upsert<T extends InstrumentSongUpsertArgs>(
      args: SelectSubset<T, InstrumentSongUpsertArgs>
    ): CheckSelect<T, Prisma__InstrumentSongClient<InstrumentSong>, Prisma__InstrumentSongClient<InstrumentSongGetPayload<T>>>

    /**
     * Count the number of InstrumentSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentSongCountArgs} args - Arguments to filter InstrumentSongs to count.
     * @example
     * // Count the number of InstrumentSongs
     * const count = await prisma.instrumentSong.count({
     *   where: {
     *     // ... the filter for the InstrumentSongs we want to count
     *   }
     * })
    **/
    count<T extends InstrumentSongCountArgs>(
      args?: Subset<T, InstrumentSongCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstrumentSongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InstrumentSong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentSongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstrumentSongAggregateArgs>(args: Subset<T, InstrumentSongAggregateArgs>): PrismaPromise<GetInstrumentSongAggregateType<T>>

    /**
     * Group by InstrumentSong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentSongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstrumentSongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstrumentSongGroupByArgs['orderBy'] }
        : { orderBy?: InstrumentSongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstrumentSongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstrumentSongGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InstrumentSong.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InstrumentSongClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    instrument<T extends InstrumentArgs = {}>(args?: Subset<T, InstrumentArgs>): CheckSelect<T, Prisma__InstrumentClient<Instrument | null >, Prisma__InstrumentClient<InstrumentGetPayload<T> | null >>;

    song<T extends SongArgs = {}>(args?: Subset<T, SongArgs>): CheckSelect<T, Prisma__SongClient<Song | null >, Prisma__SongClient<SongGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InstrumentSong findUnique
   */
  export type InstrumentSongFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InstrumentSong
     * 
    **/
    select?: InstrumentSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentSongInclude | null
    /**
     * Throw an Error if a InstrumentSong can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InstrumentSong to fetch.
     * 
    **/
    where: InstrumentSongWhereUniqueInput
  }


  /**
   * InstrumentSong findFirst
   */
  export type InstrumentSongFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InstrumentSong
     * 
    **/
    select?: InstrumentSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentSongInclude | null
    /**
     * Throw an Error if a InstrumentSong can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InstrumentSong to fetch.
     * 
    **/
    where?: InstrumentSongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstrumentSongs to fetch.
     * 
    **/
    orderBy?: Enumerable<InstrumentSongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstrumentSongs.
     * 
    **/
    cursor?: InstrumentSongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstrumentSongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstrumentSongs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstrumentSongs.
     * 
    **/
    distinct?: Enumerable<InstrumentSongScalarFieldEnum>
  }


  /**
   * InstrumentSong findMany
   */
  export type InstrumentSongFindManyArgs = {
    /**
     * Select specific fields to fetch from the InstrumentSong
     * 
    **/
    select?: InstrumentSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentSongInclude | null
    /**
     * Filter, which InstrumentSongs to fetch.
     * 
    **/
    where?: InstrumentSongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstrumentSongs to fetch.
     * 
    **/
    orderBy?: Enumerable<InstrumentSongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InstrumentSongs.
     * 
    **/
    cursor?: InstrumentSongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstrumentSongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstrumentSongs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InstrumentSongScalarFieldEnum>
  }


  /**
   * InstrumentSong create
   */
  export type InstrumentSongCreateArgs = {
    /**
     * Select specific fields to fetch from the InstrumentSong
     * 
    **/
    select?: InstrumentSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentSongInclude | null
    /**
     * The data needed to create a InstrumentSong.
     * 
    **/
    data: XOR<InstrumentSongCreateInput, InstrumentSongUncheckedCreateInput>
  }


  /**
   * InstrumentSong createMany
   */
  export type InstrumentSongCreateManyArgs = {
    data: Enumerable<InstrumentSongCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InstrumentSong update
   */
  export type InstrumentSongUpdateArgs = {
    /**
     * Select specific fields to fetch from the InstrumentSong
     * 
    **/
    select?: InstrumentSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentSongInclude | null
    /**
     * The data needed to update a InstrumentSong.
     * 
    **/
    data: XOR<InstrumentSongUpdateInput, InstrumentSongUncheckedUpdateInput>
    /**
     * Choose, which InstrumentSong to update.
     * 
    **/
    where: InstrumentSongWhereUniqueInput
  }


  /**
   * InstrumentSong updateMany
   */
  export type InstrumentSongUpdateManyArgs = {
    data: XOR<InstrumentSongUpdateManyMutationInput, InstrumentSongUncheckedUpdateManyInput>
    where?: InstrumentSongWhereInput
  }


  /**
   * InstrumentSong upsert
   */
  export type InstrumentSongUpsertArgs = {
    /**
     * Select specific fields to fetch from the InstrumentSong
     * 
    **/
    select?: InstrumentSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentSongInclude | null
    /**
     * The filter to search for the InstrumentSong to update in case it exists.
     * 
    **/
    where: InstrumentSongWhereUniqueInput
    /**
     * In case the InstrumentSong found by the `where` argument doesn't exist, create a new InstrumentSong with this data.
     * 
    **/
    create: XOR<InstrumentSongCreateInput, InstrumentSongUncheckedCreateInput>
    /**
     * In case the InstrumentSong was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InstrumentSongUpdateInput, InstrumentSongUncheckedUpdateInput>
  }


  /**
   * InstrumentSong delete
   */
  export type InstrumentSongDeleteArgs = {
    /**
     * Select specific fields to fetch from the InstrumentSong
     * 
    **/
    select?: InstrumentSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentSongInclude | null
    /**
     * Filter which InstrumentSong to delete.
     * 
    **/
    where: InstrumentSongWhereUniqueInput
  }


  /**
   * InstrumentSong deleteMany
   */
  export type InstrumentSongDeleteManyArgs = {
    where?: InstrumentSongWhereInput
  }


  /**
   * InstrumentSong without action
   */
  export type InstrumentSongArgs = {
    /**
     * Select specific fields to fetch from the InstrumentSong
     * 
    **/
    select?: InstrumentSongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InstrumentSongInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    name: 'name',
    password: 'password',
    active: 'active',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    name: 'name',
    active: 'active',
    description: 'description',
    venue: 'venue',
    location: 'location',
    notes: 'notes',
    telephone: 'telephone',
    startDateTime: 'startDateTime',
    endDateTime: 'endDateTime',
    createAt: 'createAt',
    updatedAt: 'updatedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const EventSongScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    songId: 'songId',
    published: 'published',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EventSongScalarFieldEnum = (typeof EventSongScalarFieldEnum)[keyof typeof EventSongScalarFieldEnum]


  export const SongScalarFieldEnum: {
    id: 'id',
    title: 'title',
    active: 'active',
    alias: 'alias',
    startKey: 'startKey',
    tempoCd: 'tempoCd',
    startWords: 'startWords',
    arrangement: 'arrangement',
    tags: 'tags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SongScalarFieldEnum = (typeof SongScalarFieldEnum)[keyof typeof SongScalarFieldEnum]


  export const InstrumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    active: 'active',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InstrumentScalarFieldEnum = (typeof InstrumentScalarFieldEnum)[keyof typeof InstrumentScalarFieldEnum]


  export const InstrumentSongScalarFieldEnum: {
    id: 'id',
    notes: 'notes',
    words: 'words',
    mimeType: 'mimeType',
    file: 'file',
    songId: 'songId',
    instrumentId: 'instrumentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InstrumentSongScalarFieldEnum = (typeof InstrumentSongScalarFieldEnum)[keyof typeof InstrumentSongScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    password?: StringFilter | string
    active?: IntFilter | number
    role?: EnumRoleFilter | Role
  }

  export type UserOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    active?: SortOrder
    role?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    email_active?: UserEmailActiveCompoundUniqueInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    active?: IntWithAggregatesFilter | number
    role?: EnumRoleWithAggregatesFilter | Role
  }

  export type EventWhereInput = {
    AND?: Enumerable<EventWhereInput>
    OR?: Enumerable<EventWhereInput>
    NOT?: Enumerable<EventWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    active?: IntFilter | number
    description?: StringNullableFilter | string | null
    venue?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    notes?: StringNullableFilter | string | null
    telephone?: StringNullableFilter | string | null
    startDateTime?: DateTimeFilter | Date | string
    endDateTime?: DateTimeNullableFilter | Date | string | null
    createAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    songs?: EventSongListRelationFilter
  }

  export type EventOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    description?: SortOrder
    venue?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    telephone?: SortOrder
    startDateTime?: SortOrder
    endDateTime?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventWhereUniqueInput = {
    id?: number
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    active?: IntWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
    venue?: StringNullableWithAggregatesFilter | string | null
    location?: StringNullableWithAggregatesFilter | string | null
    notes?: StringNullableWithAggregatesFilter | string | null
    telephone?: StringNullableWithAggregatesFilter | string | null
    startDateTime?: DateTimeWithAggregatesFilter | Date | string
    endDateTime?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EventSongWhereInput = {
    AND?: Enumerable<EventSongWhereInput>
    OR?: Enumerable<EventSongWhereInput>
    NOT?: Enumerable<EventSongWhereInput>
    id?: IntFilter | number
    event?: XOR<EventRelationFilter, EventWhereInput> | null
    song?: XOR<SongRelationFilter, SongWhereInput> | null
    eventId?: IntNullableFilter | number | null
    songId?: IntNullableFilter | number | null
    published?: IntFilter | number
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type EventSongOrderByInput = {
    id?: SortOrder
    eventId?: SortOrder
    songId?: SortOrder
    published?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventSongWhereUniqueInput = {
    id?: number
  }

  export type EventSongScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventSongScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventSongScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventSongScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    eventId?: IntNullableWithAggregatesFilter | number | null
    songId?: IntNullableWithAggregatesFilter | number | null
    published?: IntWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SongWhereInput = {
    AND?: Enumerable<SongWhereInput>
    OR?: Enumerable<SongWhereInput>
    NOT?: Enumerable<SongWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    active?: IntFilter | number
    alias?: StringNullableFilter | string | null
    startKey?: StringNullableFilter | string | null
    tempoCd?: IntNullableFilter | number | null
    startWords?: StringNullableFilter | string | null
    arrangement?: StringNullableFilter | string | null
    tags?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    events?: EventSongListRelationFilter
    instruments?: InstrumentSongListRelationFilter
  }

  export type SongOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    active?: SortOrder
    alias?: SortOrder
    startKey?: SortOrder
    tempoCd?: SortOrder
    startWords?: SortOrder
    arrangement?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SongWhereUniqueInput = {
    id?: number
  }

  export type SongScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SongScalarWhereWithAggregatesInput>
    OR?: Enumerable<SongScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SongScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    active?: IntWithAggregatesFilter | number
    alias?: StringNullableWithAggregatesFilter | string | null
    startKey?: StringNullableWithAggregatesFilter | string | null
    tempoCd?: IntNullableWithAggregatesFilter | number | null
    startWords?: StringNullableWithAggregatesFilter | string | null
    arrangement?: StringNullableWithAggregatesFilter | string | null
    tags?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type InstrumentWhereInput = {
    AND?: Enumerable<InstrumentWhereInput>
    OR?: Enumerable<InstrumentWhereInput>
    NOT?: Enumerable<InstrumentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    active?: IntFilter | number
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    songs?: InstrumentSongListRelationFilter
  }

  export type InstrumentOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstrumentWhereUniqueInput = {
    id?: number
  }

  export type InstrumentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InstrumentScalarWhereWithAggregatesInput>
    OR?: Enumerable<InstrumentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InstrumentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    active?: IntWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type InstrumentSongWhereInput = {
    AND?: Enumerable<InstrumentSongWhereInput>
    OR?: Enumerable<InstrumentSongWhereInput>
    NOT?: Enumerable<InstrumentSongWhereInput>
    id?: IntFilter | number
    notes?: StringNullableFilter | string | null
    words?: StringNullableFilter | string | null
    mimeType?: StringNullableFilter | string | null
    file?: StringNullableFilter | string | null
    instrument?: XOR<InstrumentRelationFilter, InstrumentWhereInput> | null
    song?: XOR<SongRelationFilter, SongWhereInput> | null
    songId?: IntNullableFilter | number | null
    instrumentId?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type InstrumentSongOrderByInput = {
    id?: SortOrder
    notes?: SortOrder
    words?: SortOrder
    mimeType?: SortOrder
    file?: SortOrder
    songId?: SortOrder
    instrumentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstrumentSongWhereUniqueInput = {
    id?: number
  }

  export type InstrumentSongScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InstrumentSongScalarWhereWithAggregatesInput>
    OR?: Enumerable<InstrumentSongScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InstrumentSongScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    notes?: StringNullableWithAggregatesFilter | string | null
    words?: StringNullableWithAggregatesFilter | string | null
    mimeType?: StringNullableWithAggregatesFilter | string | null
    file?: StringNullableWithAggregatesFilter | string | null
    songId?: IntNullableWithAggregatesFilter | number | null
    instrumentId?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    name?: string | null
    password: string
    active?: number
    role?: Role
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    name?: string | null
    password: string
    active?: number
    role?: Role
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    name?: string | null
    password: string
    active?: number
    role?: Role
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type EventCreateInput = {
    name?: string
    active?: number
    description?: string | null
    venue?: string | null
    location?: string | null
    notes?: string | null
    telephone?: string | null
    startDateTime?: Date | string
    endDateTime?: Date | string | null
    createAt?: Date | string
    updatedAt?: Date | string
    songs?: EventSongCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    name?: string
    active?: number
    description?: string | null
    venue?: string | null
    location?: string | null
    notes?: string | null
    telephone?: string | null
    startDateTime?: Date | string
    endDateTime?: Date | string | null
    createAt?: Date | string
    updatedAt?: Date | string
    songs?: EventSongUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    startDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: EventSongUpdateManyWithoutEventInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    startDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: EventSongUncheckedUpdateManyWithoutEventInput
  }

  export type EventCreateManyInput = {
    id?: number
    name?: string
    active?: number
    description?: string | null
    venue?: string | null
    location?: string | null
    notes?: string | null
    telephone?: string | null
    startDateTime?: Date | string
    endDateTime?: Date | string | null
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    startDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    startDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSongCreateInput = {
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event?: EventCreateNestedOneWithoutSongsInput
    song?: SongCreateNestedOneWithoutEventsInput
  }

  export type EventSongUncheckedCreateInput = {
    id?: number
    eventId?: number | null
    songId?: number | null
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventSongUpdateInput = {
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutSongsInput
    song?: SongUpdateOneWithoutEventsInput
  }

  export type EventSongUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: NullableIntFieldUpdateOperationsInput | number | null
    songId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSongCreateManyInput = {
    id?: number
    eventId?: number | null
    songId?: number | null
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventSongUpdateManyMutationInput = {
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSongUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: NullableIntFieldUpdateOperationsInput | number | null
    songId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongCreateInput = {
    title?: string
    active?: number
    alias?: string | null
    startKey?: string | null
    tempoCd?: number | null
    startWords?: string | null
    arrangement?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventSongCreateNestedManyWithoutSongInput
    instruments?: InstrumentSongCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateInput = {
    id?: number
    title?: string
    active?: number
    alias?: string | null
    startKey?: string | null
    tempoCd?: number | null
    startWords?: string | null
    arrangement?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventSongUncheckedCreateNestedManyWithoutSongInput
    instruments?: InstrumentSongUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    startKey?: NullableStringFieldUpdateOperationsInput | string | null
    tempoCd?: NullableIntFieldUpdateOperationsInput | number | null
    startWords?: NullableStringFieldUpdateOperationsInput | string | null
    arrangement?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSongUpdateManyWithoutSongInput
    instruments?: InstrumentSongUpdateManyWithoutSongInput
  }

  export type SongUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    startKey?: NullableStringFieldUpdateOperationsInput | string | null
    tempoCd?: NullableIntFieldUpdateOperationsInput | number | null
    startWords?: NullableStringFieldUpdateOperationsInput | string | null
    arrangement?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSongUncheckedUpdateManyWithoutSongInput
    instruments?: InstrumentSongUncheckedUpdateManyWithoutSongInput
  }

  export type SongCreateManyInput = {
    id?: number
    title?: string
    active?: number
    alias?: string | null
    startKey?: string | null
    tempoCd?: number | null
    startWords?: string | null
    arrangement?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SongUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    startKey?: NullableStringFieldUpdateOperationsInput | string | null
    tempoCd?: NullableIntFieldUpdateOperationsInput | number | null
    startWords?: NullableStringFieldUpdateOperationsInput | string | null
    arrangement?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    startKey?: NullableStringFieldUpdateOperationsInput | string | null
    tempoCd?: NullableIntFieldUpdateOperationsInput | number | null
    startWords?: NullableStringFieldUpdateOperationsInput | string | null
    arrangement?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentCreateInput = {
    name?: string
    active?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    songs?: InstrumentSongCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateInput = {
    id?: number
    name?: string
    active?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    songs?: InstrumentSongUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: InstrumentSongUpdateManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: InstrumentSongUncheckedUpdateManyWithoutInstrumentInput
  }

  export type InstrumentCreateManyInput = {
    id?: number
    name?: string
    active?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentSongCreateInput = {
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instrument?: InstrumentCreateNestedOneWithoutSongsInput
    song?: SongCreateNestedOneWithoutInstrumentsInput
  }

  export type InstrumentSongUncheckedCreateInput = {
    id?: number
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    songId?: number | null
    instrumentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentSongUpdateInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instrument?: InstrumentUpdateOneWithoutSongsInput
    song?: SongUpdateOneWithoutInstrumentsInput
  }

  export type InstrumentSongUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    songId?: NullableIntFieldUpdateOperationsInput | number | null
    instrumentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentSongCreateManyInput = {
    id?: number
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    songId?: number | null
    instrumentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentSongUpdateManyMutationInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentSongUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    songId?: NullableIntFieldUpdateOperationsInput | number | null
    instrumentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UserEmailActiveCompoundUniqueInput = {
    email: string
    active: number
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedEnumRoleFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type EventSongListRelationFilter = {
    every?: EventSongWhereInput
    some?: EventSongWhereInput
    none?: EventSongWhereInput
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type EventRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type SongRelationFilter = {
    is?: SongWhereInput | null
    isNot?: SongWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type InstrumentSongListRelationFilter = {
    every?: InstrumentSongWhereInput
    some?: InstrumentSongWhereInput
    none?: InstrumentSongWhereInput
  }

  export type InstrumentRelationFilter = {
    is?: InstrumentWhereInput | null
    isNot?: InstrumentWhereInput | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type EventSongCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<EventSongCreateWithoutEventInput>, Enumerable<EventSongUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<EventSongCreateOrConnectWithoutEventInput>
    createMany?: EventSongCreateManyEventInputEnvelope
    connect?: Enumerable<EventSongWhereUniqueInput>
  }

  export type EventSongUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<EventSongCreateWithoutEventInput>, Enumerable<EventSongUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<EventSongCreateOrConnectWithoutEventInput>
    createMany?: EventSongCreateManyEventInputEnvelope
    connect?: Enumerable<EventSongWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EventSongUpdateManyWithoutEventInput = {
    create?: XOR<Enumerable<EventSongCreateWithoutEventInput>, Enumerable<EventSongUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<EventSongCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<EventSongUpsertWithWhereUniqueWithoutEventInput>
    createMany?: EventSongCreateManyEventInputEnvelope
    connect?: Enumerable<EventSongWhereUniqueInput>
    set?: Enumerable<EventSongWhereUniqueInput>
    disconnect?: Enumerable<EventSongWhereUniqueInput>
    delete?: Enumerable<EventSongWhereUniqueInput>
    update?: Enumerable<EventSongUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<EventSongUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<EventSongScalarWhereInput>
  }

  export type EventSongUncheckedUpdateManyWithoutEventInput = {
    create?: XOR<Enumerable<EventSongCreateWithoutEventInput>, Enumerable<EventSongUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<EventSongCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<EventSongUpsertWithWhereUniqueWithoutEventInput>
    createMany?: EventSongCreateManyEventInputEnvelope
    connect?: Enumerable<EventSongWhereUniqueInput>
    set?: Enumerable<EventSongWhereUniqueInput>
    disconnect?: Enumerable<EventSongWhereUniqueInput>
    delete?: Enumerable<EventSongWhereUniqueInput>
    update?: Enumerable<EventSongUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<EventSongUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<EventSongScalarWhereInput>
  }

  export type EventCreateNestedOneWithoutSongsInput = {
    create?: XOR<EventCreateWithoutSongsInput, EventUncheckedCreateWithoutSongsInput>
    connectOrCreate?: EventCreateOrConnectWithoutSongsInput
    connect?: EventWhereUniqueInput
  }

  export type SongCreateNestedOneWithoutEventsInput = {
    create?: XOR<SongCreateWithoutEventsInput, SongUncheckedCreateWithoutEventsInput>
    connectOrCreate?: SongCreateOrConnectWithoutEventsInput
    connect?: SongWhereUniqueInput
  }

  export type EventUpdateOneWithoutSongsInput = {
    create?: XOR<EventCreateWithoutSongsInput, EventUncheckedCreateWithoutSongsInput>
    connectOrCreate?: EventCreateOrConnectWithoutSongsInput
    upsert?: EventUpsertWithoutSongsInput
    connect?: EventWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<EventUpdateWithoutSongsInput, EventUncheckedUpdateWithoutSongsInput>
  }

  export type SongUpdateOneWithoutEventsInput = {
    create?: XOR<SongCreateWithoutEventsInput, SongUncheckedCreateWithoutEventsInput>
    connectOrCreate?: SongCreateOrConnectWithoutEventsInput
    upsert?: SongUpsertWithoutEventsInput
    connect?: SongWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<SongUpdateWithoutEventsInput, SongUncheckedUpdateWithoutEventsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventSongCreateNestedManyWithoutSongInput = {
    create?: XOR<Enumerable<EventSongCreateWithoutSongInput>, Enumerable<EventSongUncheckedCreateWithoutSongInput>>
    connectOrCreate?: Enumerable<EventSongCreateOrConnectWithoutSongInput>
    createMany?: EventSongCreateManySongInputEnvelope
    connect?: Enumerable<EventSongWhereUniqueInput>
  }

  export type InstrumentSongCreateNestedManyWithoutSongInput = {
    create?: XOR<Enumerable<InstrumentSongCreateWithoutSongInput>, Enumerable<InstrumentSongUncheckedCreateWithoutSongInput>>
    connectOrCreate?: Enumerable<InstrumentSongCreateOrConnectWithoutSongInput>
    createMany?: InstrumentSongCreateManySongInputEnvelope
    connect?: Enumerable<InstrumentSongWhereUniqueInput>
  }

  export type EventSongUncheckedCreateNestedManyWithoutSongInput = {
    create?: XOR<Enumerable<EventSongCreateWithoutSongInput>, Enumerable<EventSongUncheckedCreateWithoutSongInput>>
    connectOrCreate?: Enumerable<EventSongCreateOrConnectWithoutSongInput>
    createMany?: EventSongCreateManySongInputEnvelope
    connect?: Enumerable<EventSongWhereUniqueInput>
  }

  export type InstrumentSongUncheckedCreateNestedManyWithoutSongInput = {
    create?: XOR<Enumerable<InstrumentSongCreateWithoutSongInput>, Enumerable<InstrumentSongUncheckedCreateWithoutSongInput>>
    connectOrCreate?: Enumerable<InstrumentSongCreateOrConnectWithoutSongInput>
    createMany?: InstrumentSongCreateManySongInputEnvelope
    connect?: Enumerable<InstrumentSongWhereUniqueInput>
  }

  export type EventSongUpdateManyWithoutSongInput = {
    create?: XOR<Enumerable<EventSongCreateWithoutSongInput>, Enumerable<EventSongUncheckedCreateWithoutSongInput>>
    connectOrCreate?: Enumerable<EventSongCreateOrConnectWithoutSongInput>
    upsert?: Enumerable<EventSongUpsertWithWhereUniqueWithoutSongInput>
    createMany?: EventSongCreateManySongInputEnvelope
    connect?: Enumerable<EventSongWhereUniqueInput>
    set?: Enumerable<EventSongWhereUniqueInput>
    disconnect?: Enumerable<EventSongWhereUniqueInput>
    delete?: Enumerable<EventSongWhereUniqueInput>
    update?: Enumerable<EventSongUpdateWithWhereUniqueWithoutSongInput>
    updateMany?: Enumerable<EventSongUpdateManyWithWhereWithoutSongInput>
    deleteMany?: Enumerable<EventSongScalarWhereInput>
  }

  export type InstrumentSongUpdateManyWithoutSongInput = {
    create?: XOR<Enumerable<InstrumentSongCreateWithoutSongInput>, Enumerable<InstrumentSongUncheckedCreateWithoutSongInput>>
    connectOrCreate?: Enumerable<InstrumentSongCreateOrConnectWithoutSongInput>
    upsert?: Enumerable<InstrumentSongUpsertWithWhereUniqueWithoutSongInput>
    createMany?: InstrumentSongCreateManySongInputEnvelope
    connect?: Enumerable<InstrumentSongWhereUniqueInput>
    set?: Enumerable<InstrumentSongWhereUniqueInput>
    disconnect?: Enumerable<InstrumentSongWhereUniqueInput>
    delete?: Enumerable<InstrumentSongWhereUniqueInput>
    update?: Enumerable<InstrumentSongUpdateWithWhereUniqueWithoutSongInput>
    updateMany?: Enumerable<InstrumentSongUpdateManyWithWhereWithoutSongInput>
    deleteMany?: Enumerable<InstrumentSongScalarWhereInput>
  }

  export type EventSongUncheckedUpdateManyWithoutSongInput = {
    create?: XOR<Enumerable<EventSongCreateWithoutSongInput>, Enumerable<EventSongUncheckedCreateWithoutSongInput>>
    connectOrCreate?: Enumerable<EventSongCreateOrConnectWithoutSongInput>
    upsert?: Enumerable<EventSongUpsertWithWhereUniqueWithoutSongInput>
    createMany?: EventSongCreateManySongInputEnvelope
    connect?: Enumerable<EventSongWhereUniqueInput>
    set?: Enumerable<EventSongWhereUniqueInput>
    disconnect?: Enumerable<EventSongWhereUniqueInput>
    delete?: Enumerable<EventSongWhereUniqueInput>
    update?: Enumerable<EventSongUpdateWithWhereUniqueWithoutSongInput>
    updateMany?: Enumerable<EventSongUpdateManyWithWhereWithoutSongInput>
    deleteMany?: Enumerable<EventSongScalarWhereInput>
  }

  export type InstrumentSongUncheckedUpdateManyWithoutSongInput = {
    create?: XOR<Enumerable<InstrumentSongCreateWithoutSongInput>, Enumerable<InstrumentSongUncheckedCreateWithoutSongInput>>
    connectOrCreate?: Enumerable<InstrumentSongCreateOrConnectWithoutSongInput>
    upsert?: Enumerable<InstrumentSongUpsertWithWhereUniqueWithoutSongInput>
    createMany?: InstrumentSongCreateManySongInputEnvelope
    connect?: Enumerable<InstrumentSongWhereUniqueInput>
    set?: Enumerable<InstrumentSongWhereUniqueInput>
    disconnect?: Enumerable<InstrumentSongWhereUniqueInput>
    delete?: Enumerable<InstrumentSongWhereUniqueInput>
    update?: Enumerable<InstrumentSongUpdateWithWhereUniqueWithoutSongInput>
    updateMany?: Enumerable<InstrumentSongUpdateManyWithWhereWithoutSongInput>
    deleteMany?: Enumerable<InstrumentSongScalarWhereInput>
  }

  export type InstrumentSongCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<Enumerable<InstrumentSongCreateWithoutInstrumentInput>, Enumerable<InstrumentSongUncheckedCreateWithoutInstrumentInput>>
    connectOrCreate?: Enumerable<InstrumentSongCreateOrConnectWithoutInstrumentInput>
    createMany?: InstrumentSongCreateManyInstrumentInputEnvelope
    connect?: Enumerable<InstrumentSongWhereUniqueInput>
  }

  export type InstrumentSongUncheckedCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<Enumerable<InstrumentSongCreateWithoutInstrumentInput>, Enumerable<InstrumentSongUncheckedCreateWithoutInstrumentInput>>
    connectOrCreate?: Enumerable<InstrumentSongCreateOrConnectWithoutInstrumentInput>
    createMany?: InstrumentSongCreateManyInstrumentInputEnvelope
    connect?: Enumerable<InstrumentSongWhereUniqueInput>
  }

  export type InstrumentSongUpdateManyWithoutInstrumentInput = {
    create?: XOR<Enumerable<InstrumentSongCreateWithoutInstrumentInput>, Enumerable<InstrumentSongUncheckedCreateWithoutInstrumentInput>>
    connectOrCreate?: Enumerable<InstrumentSongCreateOrConnectWithoutInstrumentInput>
    upsert?: Enumerable<InstrumentSongUpsertWithWhereUniqueWithoutInstrumentInput>
    createMany?: InstrumentSongCreateManyInstrumentInputEnvelope
    connect?: Enumerable<InstrumentSongWhereUniqueInput>
    set?: Enumerable<InstrumentSongWhereUniqueInput>
    disconnect?: Enumerable<InstrumentSongWhereUniqueInput>
    delete?: Enumerable<InstrumentSongWhereUniqueInput>
    update?: Enumerable<InstrumentSongUpdateWithWhereUniqueWithoutInstrumentInput>
    updateMany?: Enumerable<InstrumentSongUpdateManyWithWhereWithoutInstrumentInput>
    deleteMany?: Enumerable<InstrumentSongScalarWhereInput>
  }

  export type InstrumentSongUncheckedUpdateManyWithoutInstrumentInput = {
    create?: XOR<Enumerable<InstrumentSongCreateWithoutInstrumentInput>, Enumerable<InstrumentSongUncheckedCreateWithoutInstrumentInput>>
    connectOrCreate?: Enumerable<InstrumentSongCreateOrConnectWithoutInstrumentInput>
    upsert?: Enumerable<InstrumentSongUpsertWithWhereUniqueWithoutInstrumentInput>
    createMany?: InstrumentSongCreateManyInstrumentInputEnvelope
    connect?: Enumerable<InstrumentSongWhereUniqueInput>
    set?: Enumerable<InstrumentSongWhereUniqueInput>
    disconnect?: Enumerable<InstrumentSongWhereUniqueInput>
    delete?: Enumerable<InstrumentSongWhereUniqueInput>
    update?: Enumerable<InstrumentSongUpdateWithWhereUniqueWithoutInstrumentInput>
    updateMany?: Enumerable<InstrumentSongUpdateManyWithWhereWithoutInstrumentInput>
    deleteMany?: Enumerable<InstrumentSongScalarWhereInput>
  }

  export type InstrumentCreateNestedOneWithoutSongsInput = {
    create?: XOR<InstrumentCreateWithoutSongsInput, InstrumentUncheckedCreateWithoutSongsInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutSongsInput
    connect?: InstrumentWhereUniqueInput
  }

  export type SongCreateNestedOneWithoutInstrumentsInput = {
    create?: XOR<SongCreateWithoutInstrumentsInput, SongUncheckedCreateWithoutInstrumentsInput>
    connectOrCreate?: SongCreateOrConnectWithoutInstrumentsInput
    connect?: SongWhereUniqueInput
  }

  export type InstrumentUpdateOneWithoutSongsInput = {
    create?: XOR<InstrumentCreateWithoutSongsInput, InstrumentUncheckedCreateWithoutSongsInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutSongsInput
    upsert?: InstrumentUpsertWithoutSongsInput
    connect?: InstrumentWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<InstrumentUpdateWithoutSongsInput, InstrumentUncheckedUpdateWithoutSongsInput>
  }

  export type SongUpdateOneWithoutInstrumentsInput = {
    create?: XOR<SongCreateWithoutInstrumentsInput, SongUncheckedCreateWithoutInstrumentsInput>
    connectOrCreate?: SongCreateOrConnectWithoutInstrumentsInput
    upsert?: SongUpsertWithoutInstrumentsInput
    connect?: SongWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<SongUpdateWithoutInstrumentsInput, SongUncheckedUpdateWithoutInstrumentsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedEnumRoleFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type EventSongCreateWithoutEventInput = {
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    song?: SongCreateNestedOneWithoutEventsInput
  }

  export type EventSongUncheckedCreateWithoutEventInput = {
    id?: number
    songId?: number | null
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventSongCreateOrConnectWithoutEventInput = {
    where: EventSongWhereUniqueInput
    create: XOR<EventSongCreateWithoutEventInput, EventSongUncheckedCreateWithoutEventInput>
  }

  export type EventSongCreateManyEventInputEnvelope = {
    data: Enumerable<EventSongCreateManyEventInput>
    skipDuplicates?: boolean
  }

  export type EventSongUpsertWithWhereUniqueWithoutEventInput = {
    where: EventSongWhereUniqueInput
    update: XOR<EventSongUpdateWithoutEventInput, EventSongUncheckedUpdateWithoutEventInput>
    create: XOR<EventSongCreateWithoutEventInput, EventSongUncheckedCreateWithoutEventInput>
  }

  export type EventSongUpdateWithWhereUniqueWithoutEventInput = {
    where: EventSongWhereUniqueInput
    data: XOR<EventSongUpdateWithoutEventInput, EventSongUncheckedUpdateWithoutEventInput>
  }

  export type EventSongUpdateManyWithWhereWithoutEventInput = {
    where: EventSongScalarWhereInput
    data: XOR<EventSongUpdateManyMutationInput, EventSongUncheckedUpdateManyWithoutSongsInput>
  }

  export type EventSongScalarWhereInput = {
    AND?: Enumerable<EventSongScalarWhereInput>
    OR?: Enumerable<EventSongScalarWhereInput>
    NOT?: Enumerable<EventSongScalarWhereInput>
    id?: IntFilter | number
    eventId?: IntNullableFilter | number | null
    songId?: IntNullableFilter | number | null
    published?: IntFilter | number
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type EventCreateWithoutSongsInput = {
    name?: string
    active?: number
    description?: string | null
    venue?: string | null
    location?: string | null
    notes?: string | null
    telephone?: string | null
    startDateTime?: Date | string
    endDateTime?: Date | string | null
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUncheckedCreateWithoutSongsInput = {
    id?: number
    name?: string
    active?: number
    description?: string | null
    venue?: string | null
    location?: string | null
    notes?: string | null
    telephone?: string | null
    startDateTime?: Date | string
    endDateTime?: Date | string | null
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateOrConnectWithoutSongsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutSongsInput, EventUncheckedCreateWithoutSongsInput>
  }

  export type SongCreateWithoutEventsInput = {
    title?: string
    active?: number
    alias?: string | null
    startKey?: string | null
    tempoCd?: number | null
    startWords?: string | null
    arrangement?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instruments?: InstrumentSongCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutEventsInput = {
    id?: number
    title?: string
    active?: number
    alias?: string | null
    startKey?: string | null
    tempoCd?: number | null
    startWords?: string | null
    arrangement?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instruments?: InstrumentSongUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutEventsInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutEventsInput, SongUncheckedCreateWithoutEventsInput>
  }

  export type EventUpsertWithoutSongsInput = {
    update: XOR<EventUpdateWithoutSongsInput, EventUncheckedUpdateWithoutSongsInput>
    create: XOR<EventCreateWithoutSongsInput, EventUncheckedCreateWithoutSongsInput>
  }

  export type EventUpdateWithoutSongsInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    startDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateWithoutSongsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    startDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongUpsertWithoutEventsInput = {
    update: XOR<SongUpdateWithoutEventsInput, SongUncheckedUpdateWithoutEventsInput>
    create: XOR<SongCreateWithoutEventsInput, SongUncheckedCreateWithoutEventsInput>
  }

  export type SongUpdateWithoutEventsInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    startKey?: NullableStringFieldUpdateOperationsInput | string | null
    tempoCd?: NullableIntFieldUpdateOperationsInput | number | null
    startWords?: NullableStringFieldUpdateOperationsInput | string | null
    arrangement?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instruments?: InstrumentSongUpdateManyWithoutSongInput
  }

  export type SongUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    startKey?: NullableStringFieldUpdateOperationsInput | string | null
    tempoCd?: NullableIntFieldUpdateOperationsInput | number | null
    startWords?: NullableStringFieldUpdateOperationsInput | string | null
    arrangement?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instruments?: InstrumentSongUncheckedUpdateManyWithoutSongInput
  }

  export type EventSongCreateWithoutSongInput = {
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event?: EventCreateNestedOneWithoutSongsInput
  }

  export type EventSongUncheckedCreateWithoutSongInput = {
    id?: number
    eventId?: number | null
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventSongCreateOrConnectWithoutSongInput = {
    where: EventSongWhereUniqueInput
    create: XOR<EventSongCreateWithoutSongInput, EventSongUncheckedCreateWithoutSongInput>
  }

  export type EventSongCreateManySongInputEnvelope = {
    data: Enumerable<EventSongCreateManySongInput>
    skipDuplicates?: boolean
  }

  export type InstrumentSongCreateWithoutSongInput = {
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instrument?: InstrumentCreateNestedOneWithoutSongsInput
  }

  export type InstrumentSongUncheckedCreateWithoutSongInput = {
    id?: number
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    instrumentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentSongCreateOrConnectWithoutSongInput = {
    where: InstrumentSongWhereUniqueInput
    create: XOR<InstrumentSongCreateWithoutSongInput, InstrumentSongUncheckedCreateWithoutSongInput>
  }

  export type InstrumentSongCreateManySongInputEnvelope = {
    data: Enumerable<InstrumentSongCreateManySongInput>
    skipDuplicates?: boolean
  }

  export type EventSongUpsertWithWhereUniqueWithoutSongInput = {
    where: EventSongWhereUniqueInput
    update: XOR<EventSongUpdateWithoutSongInput, EventSongUncheckedUpdateWithoutSongInput>
    create: XOR<EventSongCreateWithoutSongInput, EventSongUncheckedCreateWithoutSongInput>
  }

  export type EventSongUpdateWithWhereUniqueWithoutSongInput = {
    where: EventSongWhereUniqueInput
    data: XOR<EventSongUpdateWithoutSongInput, EventSongUncheckedUpdateWithoutSongInput>
  }

  export type EventSongUpdateManyWithWhereWithoutSongInput = {
    where: EventSongScalarWhereInput
    data: XOR<EventSongUpdateManyMutationInput, EventSongUncheckedUpdateManyWithoutEventsInput>
  }

  export type InstrumentSongUpsertWithWhereUniqueWithoutSongInput = {
    where: InstrumentSongWhereUniqueInput
    update: XOR<InstrumentSongUpdateWithoutSongInput, InstrumentSongUncheckedUpdateWithoutSongInput>
    create: XOR<InstrumentSongCreateWithoutSongInput, InstrumentSongUncheckedCreateWithoutSongInput>
  }

  export type InstrumentSongUpdateWithWhereUniqueWithoutSongInput = {
    where: InstrumentSongWhereUniqueInput
    data: XOR<InstrumentSongUpdateWithoutSongInput, InstrumentSongUncheckedUpdateWithoutSongInput>
  }

  export type InstrumentSongUpdateManyWithWhereWithoutSongInput = {
    where: InstrumentSongScalarWhereInput
    data: XOR<InstrumentSongUpdateManyMutationInput, InstrumentSongUncheckedUpdateManyWithoutInstrumentsInput>
  }

  export type InstrumentSongScalarWhereInput = {
    AND?: Enumerable<InstrumentSongScalarWhereInput>
    OR?: Enumerable<InstrumentSongScalarWhereInput>
    NOT?: Enumerable<InstrumentSongScalarWhereInput>
    id?: IntFilter | number
    notes?: StringNullableFilter | string | null
    words?: StringNullableFilter | string | null
    mimeType?: StringNullableFilter | string | null
    file?: StringNullableFilter | string | null
    songId?: IntNullableFilter | number | null
    instrumentId?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type InstrumentSongCreateWithoutInstrumentInput = {
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    song?: SongCreateNestedOneWithoutInstrumentsInput
  }

  export type InstrumentSongUncheckedCreateWithoutInstrumentInput = {
    id?: number
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    songId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentSongCreateOrConnectWithoutInstrumentInput = {
    where: InstrumentSongWhereUniqueInput
    create: XOR<InstrumentSongCreateWithoutInstrumentInput, InstrumentSongUncheckedCreateWithoutInstrumentInput>
  }

  export type InstrumentSongCreateManyInstrumentInputEnvelope = {
    data: Enumerable<InstrumentSongCreateManyInstrumentInput>
    skipDuplicates?: boolean
  }

  export type InstrumentSongUpsertWithWhereUniqueWithoutInstrumentInput = {
    where: InstrumentSongWhereUniqueInput
    update: XOR<InstrumentSongUpdateWithoutInstrumentInput, InstrumentSongUncheckedUpdateWithoutInstrumentInput>
    create: XOR<InstrumentSongCreateWithoutInstrumentInput, InstrumentSongUncheckedCreateWithoutInstrumentInput>
  }

  export type InstrumentSongUpdateWithWhereUniqueWithoutInstrumentInput = {
    where: InstrumentSongWhereUniqueInput
    data: XOR<InstrumentSongUpdateWithoutInstrumentInput, InstrumentSongUncheckedUpdateWithoutInstrumentInput>
  }

  export type InstrumentSongUpdateManyWithWhereWithoutInstrumentInput = {
    where: InstrumentSongScalarWhereInput
    data: XOR<InstrumentSongUpdateManyMutationInput, InstrumentSongUncheckedUpdateManyWithoutSongsInput>
  }

  export type InstrumentCreateWithoutSongsInput = {
    name?: string
    active?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentUncheckedCreateWithoutSongsInput = {
    id?: number
    name?: string
    active?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentCreateOrConnectWithoutSongsInput = {
    where: InstrumentWhereUniqueInput
    create: XOR<InstrumentCreateWithoutSongsInput, InstrumentUncheckedCreateWithoutSongsInput>
  }

  export type SongCreateWithoutInstrumentsInput = {
    title?: string
    active?: number
    alias?: string | null
    startKey?: string | null
    tempoCd?: number | null
    startWords?: string | null
    arrangement?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventSongCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutInstrumentsInput = {
    id?: number
    title?: string
    active?: number
    alias?: string | null
    startKey?: string | null
    tempoCd?: number | null
    startWords?: string | null
    arrangement?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventSongUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutInstrumentsInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutInstrumentsInput, SongUncheckedCreateWithoutInstrumentsInput>
  }

  export type InstrumentUpsertWithoutSongsInput = {
    update: XOR<InstrumentUpdateWithoutSongsInput, InstrumentUncheckedUpdateWithoutSongsInput>
    create: XOR<InstrumentCreateWithoutSongsInput, InstrumentUncheckedCreateWithoutSongsInput>
  }

  export type InstrumentUpdateWithoutSongsInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentUncheckedUpdateWithoutSongsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongUpsertWithoutInstrumentsInput = {
    update: XOR<SongUpdateWithoutInstrumentsInput, SongUncheckedUpdateWithoutInstrumentsInput>
    create: XOR<SongCreateWithoutInstrumentsInput, SongUncheckedCreateWithoutInstrumentsInput>
  }

  export type SongUpdateWithoutInstrumentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    startKey?: NullableStringFieldUpdateOperationsInput | string | null
    tempoCd?: NullableIntFieldUpdateOperationsInput | number | null
    startWords?: NullableStringFieldUpdateOperationsInput | string | null
    arrangement?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSongUpdateManyWithoutSongInput
  }

  export type SongUncheckedUpdateWithoutInstrumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    active?: IntFieldUpdateOperationsInput | number
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    startKey?: NullableStringFieldUpdateOperationsInput | string | null
    tempoCd?: NullableIntFieldUpdateOperationsInput | number | null
    startWords?: NullableStringFieldUpdateOperationsInput | string | null
    arrangement?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSongUncheckedUpdateManyWithoutSongInput
  }

  export type EventSongCreateManyEventInput = {
    id?: number
    songId?: number | null
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventSongUpdateWithoutEventInput = {
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    song?: SongUpdateOneWithoutEventsInput
  }

  export type EventSongUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    songId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSongUncheckedUpdateManyWithoutSongsInput = {
    id?: IntFieldUpdateOperationsInput | number
    songId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSongCreateManySongInput = {
    id?: number
    eventId?: number | null
    published?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentSongCreateManySongInput = {
    id?: number
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    instrumentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventSongUpdateWithoutSongInput = {
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutSongsInput
  }

  export type EventSongUncheckedUpdateWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSongUncheckedUpdateManyWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentSongUpdateWithoutSongInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instrument?: InstrumentUpdateOneWithoutSongsInput
  }

  export type InstrumentSongUncheckedUpdateWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    instrumentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentSongUncheckedUpdateManyWithoutInstrumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    instrumentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentSongCreateManyInstrumentInput = {
    id?: number
    notes?: string | null
    words?: string | null
    mimeType?: string | null
    file?: string | null
    songId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentSongUpdateWithoutInstrumentInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    song?: SongUpdateOneWithoutInstrumentsInput
  }

  export type InstrumentSongUncheckedUpdateWithoutInstrumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    songId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentSongUncheckedUpdateManyWithoutSongsInput = {
    id?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    words?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    songId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}