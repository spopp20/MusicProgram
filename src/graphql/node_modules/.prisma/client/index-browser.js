
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.27.0
 * Query Engine version: cdba6ec525e0213cce26f8e4bb23cf556d1479bb
 */
Prisma.prismaVersion = {
  client: "2.27.0",
  engine: "cdba6ec525e0213cce26f8e4bb23cf556d1479bb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  name: 'name',
  password: 'password',
  active: 'active',
  role: 'role'
});

exports.Prisma.EventScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  active: 'active',
  description: 'description',
  venue: 'venue',
  location: 'location',
  notes: 'notes',
  telephone: 'telephone',
  startDateTime: 'startDateTime',
  endDateTime: 'endDateTime',
  createAt: 'createAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.EventSongScalarFieldEnum = makeEnum({
  id: 'id',
  eventId: 'eventId',
  songId: 'songId',
  published: 'published',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SongScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  active: 'active',
  alias: 'alias',
  startKey: 'startKey',
  tempoCd: 'tempoCd',
  startWords: 'startWords',
  arrangement: 'arrangement',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.InstrumentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  active: 'active',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.InstrumentSongScalarFieldEnum = makeEnum({
  id: 'id',
  notes: 'notes',
  words: 'words',
  mimeType: 'mimeType',
  file: 'file',
  songId: 'songId',
  instrumentId: 'instrumentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.Role = makeEnum({
  USER: 'USER',
  EDITOR: 'EDITOR',
  LEADER: 'LEADER',
  ADMIN: 'ADMIN'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Event: 'Event',
  EventSong: 'EventSong',
  Song: 'Song',
  Instrument: 'Instrument',
  InstrumentSong: 'InstrumentSong'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
