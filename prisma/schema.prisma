datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "nApi", "referentialActions"]
}


model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  email     String    @unique
  name      String?
  hashedPassword  String?
  active    Int       @default(1)
  role      Role      @default(USER)

  tokens   Token[]
  sessions Session[]
  @@unique([email, active])
}


enum Role {
  USER
  EDITOR
  LEADER
  ADMIN
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}


enum TokenType {
  RESET_PASSWORD
}


model Event {
  id            Int       @id @default(autoincrement())
  name          String    @default("") @db.VarChar(128)
  active        Int       @default(1)
  description   String?   @db.Text
  venue         String?   @db.Text
  location      String?   @db.Text
  notes         String?   @db.Text
  telephone     String?   @db.Text
  startDateTime DateTime  @default(now()) @db.Timestamp(0)
  endDateTime   DateTime? @default(now()) @db.Timestamp(0)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  songs         EventSong[]
}

model EventSong {
  id          Int @id @default(autoincrement())
  event      Event? @relation(fields: [eventId], references: [id])
  song       Song? @relation(fields: [songId], references: [id])
  eventId     Int?
  songId      Int?
  published   Int      @default(0)
  description String?  @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
}

model Song {
  id          Int      @id @default(autoincrement())
  title       String   @default("") @db.VarChar(128)
  active      Int      @default(1)
  alias       String?  @db.VarChar(128)
  startKey    String?  @db.VarChar(15)
  tempoCd     Int?
  startWords  String?  @db.Text
  arrangement String?  @db.Text
  tags        String?
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  events EventSong[]
  instruments InstrumentSong[]
}

model Instrument {
  id          Int      @id @default(autoincrement())
  name        String   @default("") @db.VarChar(128)
  active      Int      @default(1)
  description String?  @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  songs       InstrumentSong[]
}

model InstrumentSong {
  id Int       @id @default(autoincrement())
  notes        String?  @db.VarChar(128)
  words        String?  @db.Text
  mimeType     String?  @db.VarChar(128)
  file         String?  @db.Text
  instrument   Instrument? @relation(fields: [instrumentId], references: [id])
  song         Song? @relation(fields: [songId], references: [id])
  songId       Int?
  instrumentId Int?
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
}
